{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Amelia's notes &amp; brain dump.","text":""},{"location":"#categories","title":"Categories","text":"<ul> <li> <p>SQL Notes for TA</p> <p>About SQL and databases</p> <p>Details</p> </li> <li> <p>Coding Practice</p> <p>Details</p> </li> <li> <p>Server-side Development</p> <p>Notes about server from INFO 441</p> <p>Details</p> </li> <li> <p>iOS Development</p> <p>Notes about iOS from INFO 449</p> <p>Details</p> </li> </ul>"},{"location":"INFO441/Index/","title":"Index","text":"\u2190 Back"},{"location":"INFO441/Index/#_1","title":"Index","text":""},{"location":"INFO441/Index/#category-amelias-server-side-dev-notes","title":"Category: Amelia's server-side dev notes","text":"Simple server template Check Time Pluralize Audit Image Tags Pterosaurs demo JSON Data File Flow MongoDB Connection Middleware User Data Demo (MongoDB) XSS (Cross Site Scripting Attacks) SQL Injection Session (Authentication) User Actions User Actions (Part 2) Websockets Microservices and Proxies Carts &amp; Payments Testing Caching Docker"},{"location":"INFO441/aduitImgTags/","title":"aduitImgTags","text":"<p>Last modified: April 14, 2025</p> \u2190 Back"},{"location":"INFO441/aduitImgTags/#audit-image-tags-from-url","title":"Audit Image Tags from URL","text":"<p>app.js</p> <pre><code>import { promises as fs } from 'fs'\nimport express from 'express'\nconst app = express()\n\nimport fetch from 'node-fetch'\nimport parser from 'node-html-parser'\n\napp.get(\"/\", async (req, res) =&gt; {\n    console.log(\"got a request for /\")\n    res.type('html')\n    let fileContents = await fs.readFile(\"index.html\")\n    res.send(fileContents)\n})\n\napp.get(\"/style.css\", async (req, res) =&gt; {\n    console.log(\"got a request for style.css\")\n    res.type(\"css\")\n    let fileContent = await fs.readFile(\"style.css\")\n    res.send(fileContent)\n})\n\napp.get(\"/index.js\", async (req, res) =&gt; {\n    console.log(\"got a request for index.js\")\n    res.type(\"js\")\n    let fileContents = await fs.readFile(\"index.js\")\n    res.send(fileContents)\n})\n\napp.get(\"/favicon.ico\", async (req, res) =&gt; {\n    res.type(\"png\")\n    let fileContents = await fs.readFile(\"favicon.ico\")\n    res.send(fileContents)\n})\n\napp.get(\"/api/auditurl\", async (req, res) =&gt; {\n    const inputUrl = req.query.url\n\n    const response = await fetch(inputUrl)\n    const pageText = await response.text()\n\n    console.log(pageText)\n\n    const htmlPage = parser.parse(pageText)\n    const imgTags = htmlPage.querySelectorAll(\"img\")\n\n    var htmlReturn = \"\"\n\n    for (let i = 0; i &lt; imgTags.length; i++)\n    {\n        const imgTag = imgTags[i]\n\n        htmlReturn += \"&lt;h3&gt;Image \" + i + \" info: &lt;/h3&gt;\" \n        htmlReturn += \"alt text: \" + imgTag.attributes.alt + \"&lt;br&gt;\"\n        htmlReturn += \"img src: \" + imgTag.attributes.src + \"&lt;br&gt;\"\n        htmlReturn += \"&lt;img src='\" + inputUrl + imgTag.attributes.src + \"' /&gt;\"\n    }\n\n    res.type(\"html\")\n    res.send(htmlReturn)\n\n})\n\napp.listen(3000, () =&gt; {\n    console.log(\"Example app listening at http://localhost:3000\")\n})\n</code></pre> <p>index.js</p> <pre><code>async function auditUrl() {\n    let inputUrl = document.getElementById(\"urlInput\").value\n    let response = await fetch(\"api/auditurl?url=\" + inputUrl)\n    let resultText = await response.text()\n\n    document.getElementById(\"results\").innerHTML = resultText;\n}\n</code></pre> <p>index.html</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n        &lt;script src=\"index.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Audit Image Tags&lt;/h1&gt;\n        &lt;input type=\"text\" id=\"urlInput\" /&gt;\n        &lt;button onclick=\"auditUrl()\"&gt;Audit Img Tags for URL&lt;/button&gt;\n        &lt;br&gt;\n        &lt;br&gt;\n        &lt;div id=\"results\"&gt;&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>style.css</p> <pre><code>h1 {\n    color: pink\n}\n\nbody {\n    background-color: lightyellow\n}\n\nbutton {\n    background-color: lightcoral;\n    color: white;\n    border-color: skyblue;\n}\n\nimg {\n    max-height: 300px;\n    max-width: auto;\n}\n</code></pre>"},{"location":"INFO441/caching/","title":"Caching","text":"<p>Last modified: May 21, 2025</p> \u2190 Back"},{"location":"INFO441/caching/#caching","title":"Caching","text":"<ul> <li> <p>Saving the results of a calculation or request so that in the future, those results can be reused instead of redoing the calculation or request</p> <ul> <li>Caching is often the best first step to make your site faster and able to handle more users</li> </ul> </li> <li> <p>Benefits: Makes calculations or requests run faster (or skips them entirely)</p> </li> <li> <p>Risks: The results you saved may be out of date (stale)</p> </li> <li> <p>Also, some requests can\u2019t be cached for different reasons:</p> <ul> <li> <p>The response may be unique each time (e.g., generate a random number)</p> </li> <li> <p>You want the server to perform an action (e.g., POST or DELETE requests)</p> </li> <li> <p>You always want most up to date (e.g., bank account balance)</p> </li> </ul> </li> </ul>"},{"location":"INFO441/caching/#caching-locations","title":"Caching locations","text":"<p> app.js</p> <pre><code>import express from 'express';\nimport path from 'path';\nimport cookieParser from 'cookie-parser';\nimport logger from 'morgan';\nimport sessions from 'express-session';\n\n\n// This is a public sample test API key.\n// Don\u2019t submit any personally identifiable information in requests made with this key.\n// Sign in to see your own test API key embedded in code samples.\nimport stripeLib from 'stripe'\nconst stripe = stripeLib('  ');\n\n\nimport models from './models.js'\nimport itemsRouter from './routes/items.js';\n\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nvar app = express();\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\nconst oneDay = 1000 * 60 * 60 * 24;\napp.use(sessions({\n    secret: \"thisismysecrctekey\",\n    saveUninitialized:true,\n    cookie: { maxAge: oneDay },\n    resave: false \n}))\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use((req, res, next) =&gt;{\n    req.models = models\n    req.stripe = stripe\n    next()\n})\n\n\napp.use('/items', itemsRouter);\n\nexport default app;\n</code></pre> <p>items.js</p> <pre><code>import cache from 'memory-cache'\nimport express from 'express';\nvar router = express.Router();\n\n// artificially slow down the response\nasync function getItemsSlow(req) {\n    const allItems = await req.models.Item.find()\n\n    const sleepSeconds = 5\n    await new Promise(r =&gt; setTimeout(r, sleepSeconds * 1000))\n\n    return allItems\n}\n\nrouter.get(\"/\", async (req, res) =&gt; {\n    console.log(\"got a GET request for all items, first check the cache\")\n\n    let allItems = cache.get(\"allItems\")\n\n    if (allItems) {\n        console.log(\"cache hit: found items in my cache\")\n    }\n    else {\n        console.log(\"cache miss: doing the slow db lookup\")\n\n        // let allItems = await req.models.Item.find()\n        allItems = await getItemsSlow(req);\n        console.log(\"loaded items from db, saving to cache\")\n        cache.put(\"allItems\", allItems, 30 * 1000)\n    }\n\n    // res.setHeader('Cache-Control', 'public, max-age=30')\n    res.json(allItems)\n})\n\nrouter.post(\"/saveCart\", async (req, res) =&gt; {\n    console.log(\n        \"saving card, session is currently: \", \n        req.session\n    )\n\n    const cartInfo = req.body\n    //TODO: validate cart info is only item ids and counts\n\n    // for some reason if I save an object (instead of string) \n    // it gets deleted later\n    req.session.cartInfo = JSON.stringify(cartInfo)\n\n    console.log(\"session is now\", req.session)\n\n    res.json({status: \"success\"})\n})\n\nrouter.get('/getCart', async (req, res) =&gt; {\n    if(!req.session || !req.session.cartInfo){\n        // if no session or saved cart, just return empty cart\n        res.json([])\n        return\n    }\n\n    const cartInfo = JSON.parse(req.session.cartInfo)\n\n    // add item names and prices to the cart info\n    const combinedCartInfo = await addPricesToCart(cartInfo, req.models)\n\n    res.json(combinedCartInfo)\n})\n\nasync function addPricesToCart(cartInfo, models){\n    //cartInfo should start like: [{itemId: 342, itemCount: 2}, {itemId:345, itemCount: 1}, ...]\n\n    // look up in the db all the items listed in my cart\n    const cartItemIds = cartInfo.map(cartItem =&gt; cartItem.itemId)\n    const itemsInfo = await models.Item.find().where(\"_id\").in(cartItemIds).exec()\n\n    // itemsInfo will be an array of json, like this:\n    // [{_id:342, name: \"orange\", price: ...}, {_id: 345, name: \"apple\", ...},...]\n\n    // transform itemsInfo into an object where I can look up info by the id\n    let itemsInfoById = {}\n    itemsInfo.forEach(itemInfo =&gt; {\n        itemsInfoById[itemInfo._id] = itemInfo\n    })\n\n    // itemsInfoById will look like\n    // {\n    //  342: {_id:342, name: \"orange\", price: ...}\n    //  345: {_id: 345, name: \"apple\", ...}\n    // }\n\n    // take the cartInfo, and for each item, make a new object that includes the name and price\n    const combinedCartInfo = cartInfo.map(cartItem =&gt; {\n        return {\n            itemId: cartItem.itemId, // from user cart\n            itemCount: cartItem.itemCount, // from user cart\n            name: itemsInfoById[cartItem.itemId].name, // from the db\n            price: itemsInfoById[cartItem.itemId].price // from the db\n        }\n    })\n    return combinedCartInfo\n}\n\nasync function calculateOrderAmount(req){\n    // get cart info, combine with prices, calculate the total price\n    const cartInfo = JSON.parse(req.session.cartInfo)\n\n    const combinedCartInfo = await addPricesToCart(cartInfo, req.models)\n\n    const totalCost = combinedCartInfo\n        .map(item =&gt; item.price * item.itemCount) // get cost for each item type\n        .reduce((prev, curr) =&gt; prev + curr)\n\n    return totalCost\n}\n\n\nrouter.post('/create-payment-intent', async (req, res) =&gt; {\n    //look up the order amount\n    let orderAmount = await calculateOrderAmount(req)\n\n    // create a PaymentIntent object with the order amount\n    const paymentIntent = await req.stripe.paymentIntents.create({\n        amount: orderAmount * 100,\n        currency: \"usd\", // note: 'usd' is actually US cents for some reason (US dollars * 100)\n        automatic_payment_methods: {\n            enabled: true\n        }\n    })\n\n    res.send({\n        clientSecret: paymentIntent.client_secret\n    })\n})\n\nexport default router;\n</code></pre>"},{"location":"INFO441/cartsnpayments/","title":"Cartsnpayments","text":"<p>Last modified: May 14, 2025</p> \u2190 Back"},{"location":"INFO441/cartsnpayments/#carts-payments","title":"Carts &amp; Payments","text":"<pre><code>demo/\n\u251c\u2500\u2500 routes/\n\u2502   \u2514\u2500\u2500 items.js\n\u251c\u2500\u2500 public/\n\u2502   \u2514\u2500\u2500 index.html\n\u2502   \u2514\u2500\u2500 stylesheets/\n\u2502   \u2514\u2500\u2500 javascripts/\n\u2502       \u2514\u2500\u2500 index.js\n\u2502       \u2514\u2500\u2500 checkout.js\n\u251c\u2500\u2500 models.js\n\u2514\u2500\u2500 app.js\n</code></pre> <p>app.js</p> <pre><code>import express from 'express';\nimport path from 'path';\nimport cookieParser from 'cookie-parser';\nimport logger from 'morgan';\nimport sessions from 'express-session';\n\n\n// This is a public sample test API key.\n// Don\u2019t submit any personally identifiable information in requests made with this key.\n// Sign in to see your own test API key embedded in code samples.\nimport stripeLib from 'stripe'\nconst stripe = stripeLib('a_key');\n\n\nimport models from './models.js'\nimport itemsRouter from './routes/items.js';\n\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nvar app = express();\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\nconst oneDay = 1000 * 60 * 60 * 24;\napp.use(sessions({\n    secret: \"thisismysecrctekeyfhrgfgrfrty84fwir767\",\n    saveUninitialized:true,\n    cookie: { maxAge: oneDay },\n    resave: false \n}))\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use((req, res, next) =&gt;{\n    req.models = models\n    req.stripe = stripe\n    next()\n})\n\napp.use('/items', itemsRouter);\n\nexport default app;\n</code></pre> <p>models.js</p> <pre><code>import mongoose from \"mongoose\";\n\nlet models = {};\n\nconsole.log(\"connecting to mongodb\");\n// Put your MongoDB Atlas connection string in, or\nawait mongoose.connect('mongodb link');\nconsole.log(\"connected to mongodb\");\n\n//Add schemas and models\nconst itemSchema = new mongoose.Schema({\n    name: String,\n    price: Number\n})\n\nmodels.Item = mongoose.model(\"Item\", itemSchema)\n\nconsole.log(\"finished creating models\");\n\nexport default models;\n</code></pre> <p>index.js</p> <pre><code>async function init(){\n    loadItems();\n}\n\nlet allItemIds = []\n\nasync function loadItems(){\n  document.getElementById(\"allitemsdiv\").innerHTML = \"Loading...\";\n\n  //load items from server\n  let response = await fetch(\"/items\");\n  let itemsJson = await response.json();\n\n  allItemIds = itemsJson.map(itemInfo =&gt; itemInfo._id);\n\n  //display users\n  let itemsHTML = itemsJson.map(itemInfo =&gt; {\n      return `\n      &lt;hr&gt;\n      &lt;div&gt;\n          &lt;h3&gt;Item: ${itemInfo.name}&lt;/h3&gt;\n          &lt;strong&gt;Price: &lt;/strong&gt;$&lt;span id=\"item_price_${itemInfo._id}\"&gt;${itemInfo.price}&lt;/span&gt;&lt;br&gt;\n          &lt;strong&gt;How many do you want?&lt;/strong&gt; &lt;input type=\"number\" id=\"item_num_${itemInfo._id}\" value=0 /&gt; \n      &lt;/div&gt;`\n  }).join(\"&lt;hr&gt;\")\n\n  document.getElementById(\"allitemsdiv\").innerHTML = itemsHTML;\n\n}\n\nasync function checkout(){\n  let cartInfo = allItemIds.map(itemId =&gt; {\n      return {\n          itemId: itemId,\n          itemCount: document.getElementById(`item_num_${itemId}`).value,\n      }\n  })\n\n  cartInfo = cartInfo.filter(itemInfo =&gt; itemInfo.itemCount &gt; 0)\n\n  let response = await fetch(\n      \"/items/saveCart\",\n      {\n          method: \"POST\",\n          body: JSON.stringify(cartInfo),\n          headers: {'Content-Type': 'application/json'}\n      }\n  );\n\n  //once cart is saved, redirect to the checkout page\n  location.href = \"/checkout.html\"\n}\n</code></pre> <p>checkout.js</p> <pre><code>let totalCost = 0;\n\nasync function init(){\n    await loadCart();\n\n    if(totalCost &gt; 0){\n      document.getElementById(\"payment-div\").style.display=\"\"\n      // call functions from Stripe Custom Flow tutorial: https://stripe.com/docs/payments/quickstart\n      initialize();\n      checkStatus();\n    }\n}\n\nasync function loadCart(){\n    document.getElementById(\"yourcartdiv\").innerHTML = \"Loading...\";\n\n    //load items from server\n    let response = await fetch(\"/items/getCart\");\n    let cartJson = await response.json();\n\n    //display cart items\n\n    let cartHTML = cartJson.map(itemInfo =&gt; {\n        totalCost += itemInfo.price * itemInfo.itemCount;\n\n        return `\n        &lt;hr&gt;\n        &lt;div&gt;\n            &lt;h3&gt;Item: ${itemInfo.name}&lt;/h3&gt;\n            &lt;strong&gt;Price: &lt;/strong&gt;$${itemInfo.price}&lt;br&gt;\n            &lt;strong&gt;Count&lt;/strong&gt; ${itemInfo.itemCount}\n        &lt;/div&gt;`\n    }).join(\"&lt;hr&gt;\")\n\n    document.getElementById(\"yourcartdiv\").innerHTML = cartHTML;\n    document.getElementById(\"total_price\").innerText = totalCost;\n}\n\n\n// From Stripe Custom Flow tutorial: https://stripe.com/docs/payments/quickstart\n// changed endpoint to: \"/items/create-payment-intent\n\n// This is a public sample test API key.\n// Don\u2019t submit any personally identifiable information in requests made with this key.\n// Sign in to see your own test API key embedded in code samples.\nconst stripe = Stripe(\"pk_test_TYooMQauvdEDq54NiTphI7jx\");\n\n// The items the customer wants to buy\nconst items = [{ id: \"xl-tshirt\" }];\n\nlet elements;\n\n// initialize();\n// checkStatus();\n\ndocument\n  .querySelector(\"#payment-form\")\n  .addEventListener(\"submit\", handleSubmit);\n\n// Fetches a payment intent and captures the client secret\nasync function initialize() {\n  const response = await fetch(\"/items/create-payment-intent\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ items }),\n  });\n  const { clientSecret } = await response.json();\n\n  const appearance = {\n    theme: 'stripe',\n  };\n  elements = stripe.elements({ appearance, clientSecret });\n\n  const paymentElementOptions = {\n    layout: \"tabs\",\n  };\n\n  const paymentElement = elements.create(\"payment\", paymentElementOptions);\n  paymentElement.mount(\"#payment-element\");\n}\n\nasync function handleSubmit(e) {\n  e.preventDefault();\n  setLoading(true);\n\n  const { error } = await stripe.confirmPayment({\n    elements,\n    confirmParams: {\n      // Make sure to change this to your payment completion page\n      return_url: \"http://localhost:3000/checkout.html\",\n    },\n  });\n\n  // This point will only be reached if there is an immediate error when\n  // confirming the payment. Otherwise, your customer will be redirected to\n  // your `return_url`. For some payment methods like iDEAL, your customer will\n  // be redirected to an intermediate site first to authorize the payment, then\n  // redirected to the `return_url`.\n  if (error.type === \"card_error\" || error.type === \"validation_error\") {\n    showMessage(error.message);\n  } else {\n    showMessage(\"An unexpected error occurred.\");\n  }\n\n  setLoading(false);\n}\n\n// Fetches the payment intent status after payment submission\nasync function checkStatus() {\n  const clientSecret = new URLSearchParams(window.location.search).get(\n    \"payment_intent_client_secret\"\n  );\n\n  if (!clientSecret) {\n    return;\n  }\n\n  const { paymentIntent } = await stripe.retrievePaymentIntent(clientSecret);\n\n  switch (paymentIntent.status) {\n    case \"succeeded\":\n      showMessage(\"Payment succeeded!\");\n      break;\n    case \"processing\":\n      showMessage(\"Your payment is processing.\");\n      break;\n    case \"requires_payment_method\":\n      showMessage(\"Your payment was not successful, please try again.\");\n      break;\n    default:\n      showMessage(\"Something went wrong.\");\n      break;\n  }\n}\n\n// ------- UI helpers -------\n\nfunction showMessage(messageText) {\n  const messageContainer = document.querySelector(\"#payment-message\");\n\n  messageContainer.classList.remove(\"hidden\");\n  messageContainer.textContent = messageText;\n\n  setTimeout(function () {\n    messageContainer.classList.add(\"hidden\");\n    messageContainer.textContent = \"\";\n  }, 4000);\n}\n\n// Show a spinner on payment submission\nfunction setLoading(isLoading) {\n  if (isLoading) {\n    // Disable the button and show a spinner\n    document.querySelector(\"#submit\").disabled = true;\n    document.querySelector(\"#spinner\").classList.remove(\"hidden\");\n    document.querySelector(\"#button-text\").classList.add(\"hidden\");\n  } else {\n    document.querySelector(\"#submit\").disabled = false;\n    document.querySelector(\"#spinner\").classList.add(\"hidden\");\n    document.querySelector(\"#button-text\").classList.remove(\"hidden\");\n  }\n}\n</code></pre>"},{"location":"INFO441/checkTime/","title":"checkTime","text":"<p>Last modified: April 12, 2025</p> \u2190 Back"},{"location":"INFO441/checkTime/#check-time","title":"Check Time","text":"<p>app.js </p> <pre><code>import { promises as fs } from 'fs'\nimport express from 'express'\nconst app = express()\n\napp.get(\"/\", async (req, res) =&gt; {\n    console.log(\"got a request for /\")\n    res.type('html')\n    let fileContents = await fs.readFile(\"index.html\")\n    res.send(fileContents)\n})\n\napp.get(\"/style.css\", async (req, res) =&gt; {\n    console.log(\"got a request for style.css\")\n    res.type(\"css\")\n    let fileContent = await fs.readFile(\"style.css\")\n    res.send(fileContent)\n})\n\napp.get(\"/index.js\", async (req, res) =&gt; {\n    console.log(\"got a request for index.js\")\n    res.type(\"js\")\n    let fileContents = await fs.readFile(\"index.js\")\n    res.send(fileContents)\n})\n\napp.get(\"/favicon.ico\", async (req, res) =&gt; {\n    res.type(\"png\")\n    let fileContents = await fs.readFile(\"favicon.ico\")\n    res.send(fileContents)\n})\n\napp.listen(3000, () =&gt; {\n    console.log(\"Example app listening at http://localhost:3000\")\n})\n</code></pre> <p>index.html</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n        &lt;script src=\"index.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Current Time Demo&lt;/h1&gt;\n        &lt;button onclick=\"checkTime()\"&gt;Check Time&lt;/button&gt;\n        &lt;br&gt;\n        &lt;br&gt;\n        &lt;div id=\"results\"&gt;&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>index.js</p> <pre><code>async function checkTime() {\n    let response = await fetch(\"api/getTime\")\n    let resultText = await response.text()\n\n    document.getElementById(\"results\").innerHTML = resultText\n}\n</code></pre> <p>style.css</p> <pre><code>h1 {\n    color: pink\n}\n\nbody {\n    background-color: lightyellow\n}\n\nbutton {\n    background-color: lightcoral;\n    color: white;\n    border-color: skyblue;\n}\n</code></pre>"},{"location":"INFO441/docker/","title":"Docker","text":"<p>Last modified: May 30, 2025</p> \u2190 Back"},{"location":"INFO441/docker/#docker","title":"Docker","text":""},{"location":"INFO441/docker/#run-a-docker-container","title":"Run a docker container","text":"<pre><code>docker run hello-world\n</code></pre> <p>Just prints out hello world (good for testing if Docker is working)</p> <pre><code>docker ps\n</code></pre> <p>See what is running</p> <p>Add \u201c-a\u201d to include stopped containers</p> <pre><code>docker rm CONTAINER_NAME\n</code></pre> <p>Remove a docker container</p> <pre><code>docker run -it ubuntu\n</code></pre> <p>Run the ubuntu Linux operating system</p> <p>Note: \u201c-it\u201d means to run it as an interactive terminal </p> <pre><code>docker run -p 80:80 nginx\n</code></pre> <p>nginx is a popular static web server</p> <p>Note: by default, a container is closed to traffic on all ports.</p> <ul> <li>\u201c-p 80:80\u201d says: for traffic coming in on port 80, send it to port 80 inside the container</li> </ul> <p></p>"},{"location":"INFO441/docker/#docker-demo","title":"Docker demo","text":"<pre><code>FROM nginx\nCOPY . /usr/share/nginx/html\n</code></pre> <p>The \u201cDockerfile\u201d is a definition for a docker container.</p> <p>It consists of a set of steps, starting \u201cFROM\u201d a specific docker container, and then running additional steps (e.g., copying files) to set up the container the way you want it.</p> <p></p>"},{"location":"INFO441/docker/#demos","title":"demos","text":""},{"location":"INFO441/docker/#nginxhtml","title":"nginx/html","text":"<pre><code>demo/\n\u251c\u2500\u2500 index.html\n\u2514\u2500\u2500 Dockerfile\n</code></pre> <p>Dockerfile</p> <pre><code>FROM nginx\nCOPY . /usr/share/nginx/html\n</code></pre> <pre><code>docker build -t amelial9/dockerdemo .\ndocker run -d -p 80:80 amelial9/dockerdemo\n</code></pre> <p></p>"},{"location":"INFO441/docker/#nodedemo","title":"nodedemo","text":"<pre><code>demo/\n\u251c\u2500\u2500 one-of-the-prev-demos\n\u2514\u2500\u2500 Dockerfile\n</code></pre> <p>Dockerfile</p> <pre><code>FROM node\n\n# equivalent to cd /app\nWORKDIR /app\n\nCOPY package.json package-lock.json ./\nRUN npm install\n\nCOPY . .\n\nEXPOSE 3000\n\nENTRYPOINT [\"npm\", \"start\"]\n</code></pre> <pre><code>docker build -t amelial9/node-app .\ndocker run -d -p 4000:3000 amelial9/node-app\n</code></pre>"},{"location":"INFO441/jsonDataFileFlow/","title":"jsonDataFileFlow","text":"<p>Last modified: April 17, 2025</p> \u2190 Back"},{"location":"INFO441/jsonDataFileFlow/#json-data-file-flow","title":"JSON Data File Flow","text":""},{"location":"INFO441/jsonDataFileFlow/#files-on-my-server","title":"\ud83d\uddc2 Files on My Server","text":"<ul> <li>userData.json: JSON file used to store user information.</li> </ul>"},{"location":"INFO441/jsonDataFileFlow/#my-page-server","title":"\ud83d\udda5 My Page Server","text":"<ul> <li>Acts as the intermediary between the user's browser and the JSON file.</li> </ul>"},{"location":"INFO441/jsonDataFileFlow/#server-side-file-operations","title":"Server-Side File Operations","text":"<ul> <li><code>fs.readFile(...)</code>: Reads user data from <code>userData.json</code>.</li> <li><code>fs.writeFile(...)</code>: Writes user data to <code>userData.json</code>.</li> </ul>"},{"location":"INFO441/jsonDataFileFlow/#my-site-in-a-users-browser","title":"\ud83c\udf10 My Site in a User's Browser","text":"<ul> <li>Interface where users interact with the application.</li> </ul>"},{"location":"INFO441/jsonDataFileFlow/#browser-server-communication","title":"Browser-Server Communication","text":"<ul> <li> <p>GET Request:</p> <ul> <li>Endpoint used to load users from the server.</li> <li>Triggers a read from <code>userData.json</code>.</li> </ul> </li> <li> <p>POST Request (with JSON body):</p> <ul> <li>Used to save user info.</li> <li>Sends data to server, which writes to <code>userData.json</code>.</li> </ul> </li> </ul>"},{"location":"INFO441/middleware/","title":"Middleware","text":"<p>Last modified: April 23, 2025</p> \u2190 Back"},{"location":"INFO441/middleware/#middleware","title":"Middleware","text":"<p>Functions that run during each request (or a subset of requests):</p> <ul> <li>These functions are chained together, each one calling the next function (in the variable <code>next</code>)<ul> <li>At the end they finally call your API endpoint handler (e.g., <code>app.get(\"/users\", \u2026)</code>)</li> </ul> </li> <li>They generally either:<ul> <li>Modify the request  </li> <li>Modify the response  </li> <li>Log something</li> </ul> </li> </ul> <p></p>"},{"location":"INFO441/middleware/#structure-of-a-middleware-function","title":"Structure of a middleware function:","text":"<pre><code>app.use(function (req, res, next) {\n    // modify req, res, or log something\n    next(); // call the next function (middleware or handler)\n});\n</code></pre>"},{"location":"INFO441/mongodb/","title":"Mongodb","text":"<p>Last modified: May 20, 2025</p> \u2190 Back"},{"location":"INFO441/mongodb/#mongodb-connection","title":"MongoDB Connection","text":"<pre><code>import mongoose from 'mongoose'\n\nlet models = {}\n\nconsole.log('Connecting to mongodb')\n\n// TODO: Insert mongodb connection URL below\nawait mongoose.connect('mongodb://localhost:27017/userDemo)\n\nconsole.log('Connected to mongodb')\n\nconst userSchema = new mongoose.Schema({\n    first_name: String,\n    last_name: String,\n    favorite_ice_cream: String\n})\n\nmodels.User = mongoose.model('User', userSchema)\n\nexport default models\n</code></pre> <p>remember to edit IP access list</p> <p></p>"},{"location":"INFO441/pluralize/","title":"Pluralize","text":"<p>Last modified: April 14, 2025</p> \u2190 Back"},{"location":"INFO441/pluralize/#pluralize-words","title":"Pluralize words","text":"<p>app.js</p> <pre><code>import { promises as fs } from 'fs'\nimport pluralize from 'pluralize'\nimport express from 'express'\nconst app = express()\n\napp.get(\"/\", async (req, res) =&gt; {\n    console.log(\"got a request for /\")\n    res.type('html')\n    let fileContents = await fs.readFile(\"index.html\")\n    res.send(fileContents)\n})\n\napp.get(\"/style.css\", async (req, res) =&gt; {\n    console.log(\"got a request for style.css\")\n    res.type(\"css\")\n    let fileContent = await fs.readFile(\"style.css\")\n    res.send(fileContent)\n})\n\napp.get(\"/index.js\", async (req, res) =&gt; {\n    console.log(\"got a request for index.js\")\n    res.type(\"js\")\n    let fileContents = await fs.readFile(\"index.js\")\n    res.send(fileContents)\n})\n\napp.get(\"/favicon.ico\", async (req, res) =&gt; {\n    res.type(\"png\")\n    let fileContents = await fs.readFile(\"favicon.ico\")\n    res.send(fileContents)\n})\n\napp.get(\"/api/pluralize\", (req, res) =&gt; {\n    const inputWord = req.query.word\n    const pluralWord = pluralize(inputWord)    \n    res.type(\"txt\")\n    res.send(pluralWord)\n})\n\napp.listen(3000, () =&gt; {\n    console.log(\"Example app listening at http://localhost:3000\")\n})\n</code></pre> <p>index.html</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n        &lt;script src=\"index.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Pluralize Demo&lt;/h1&gt;\n        &lt;input type=\"text\" id=\"wordinput\" /&gt;\n        &lt;button onclick=\"pluralizeWord()\"&gt;Pluralize!&lt;/button&gt;\n        &lt;br&gt;\n        &lt;br&gt;\n        &lt;div id=\"results\"&gt;&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>index.js</p> <pre><code>async function pluralizeWord() {\n    let inputWord = document.getElementById(\"wordinput\").value\n    let response = await fetch(\"api/pluralize?word=\" + inputWord)\n    let resultText = await response.text()\n\n    document.getElementById(\"results\").innerHTML = resultText\n}\n</code></pre> <p>style.css</p> <pre><code>h1 {\n    color: pink\n}\n\nbody {\n    background-color: lightyellow\n}\n\nbutton {\n    background-color: lightcoral;\n    color: white;\n    border-color: skyblue;\n}\n</code></pre>"},{"location":"INFO441/proxies/","title":"Proxies","text":"<p>Last modified: May 13, 2025</p> \u2190 Back"},{"location":"INFO441/proxies/#microservices-and-proxies","title":"Microservices and Proxies","text":""},{"location":"INFO441/proxies/#forward-proxy","title":"Forward Proxy","text":"<p>A server that sits between a client (like your computer) and the internet. Forwards your requests to websites and sends the responses back to you. It hides the client from the server.</p> <p>Uses:  </p> <ul> <li> <p>Security (firewalls)</p> </li> <li> <p>Anonymity (VPNs, or hackers)</p> </li> <li> <p>Caching</p> </li> </ul>"},{"location":"INFO441/proxies/#reverse-proxy","title":"Reverse Proxy","text":"<p>A server that sits in front of web servers. It receives requests from clients and forwards them to the appropriate backend server. It hides the server from the client.</p> <p>Benefits:  </p> <ul> <li> <p>Transparent to client</p> </li> <li> <p>Scalable</p> </li> </ul>"},{"location":"INFO441/proxies/#microservices","title":"Microservices","text":"<p>What are they good at?</p> <ul> <li> <p>Scaling different parts of your app up or down</p> </li> <li> <p>Letting individuals teams choose their own favorite technology</p> <ul> <li>Maybe the /login team loves C# and the /getAllVideosForUser team loves JavaScript\u2026 with microservices, you can let each group choose</li> </ul> </li> <li> <p>Troubleshooting/rollouts/rollbacks are by endpoint</p> </li> </ul> <p></p>"},{"location":"INFO441/proxies/#set-environment-variables-before-running-npm-start-mac","title":"set environment variables before running npm start (mac)","text":"<pre><code>export DEBUG=\"express:* express-starter:server\"\nexport DEBUG=\"http-proxy-middleware* node server.js\"\n\nexport PORT=3000\n</code></pre> <p>macbook has airplay on port 5000, turn off in setting first</p> <p></p>"},{"location":"INFO441/proxies/#load-balancing-proxy","title":"Load Balancing Proxy","text":"<pre><code>import request from 'request';\n\nconst servers = ['http://localhost:6001', 'http://localhost:6002' ];\nlet cur_server_index = 0;\napp.use('/api/square', (req, res) =&gt; {\n  try {\n    cur_server_index = (cur_server_index  + 1) % servers.length;\n    req.pipe(request({ url: servers[cur_server_index] + req.originalUrl })).pipe(res);\n  } catch (error) {\n    console.log(\"error in /api/square:\" + error)\n    res.status(500).json({status: \"error\", error: error});\n  }\n})\n</code></pre> <pre><code>microservices/\n\u251c\u2500\u2500 express-reverse-proxy/\n\u2502   \u2514\u2500\u2500 app.js\n\u251c\u2500\u2500 express-reverse-double/\n\u2502   \u2514\u2500\u2500 app.js\n\u251c\u2500\u2500 express-reverse-square/\n\u2502   \u2514\u2500\u2500 app.js\n\u2514\u2500\u2500 react-client/\n</code></pre> <p>express-reverse-proxy/app.js</p> <pre><code>import express from 'express';\nimport path from 'path';\nimport cookieParser from 'cookie-parser';\nimport logger from 'morgan';\nimport { createProxyMiddleware } from 'http-proxy-middleware'\nimport request from 'request'\n\nimport usersRouter from './routes/users.js';\n\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nvar app = express();\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser()); \n\napp.use('/users', usersRouter);\n\napp.get('/api/double', createProxyMiddleware({\n    target: 'http://localhost:5000'\n}))\n\nconst servers = ['http://localhost:6001', 'http://localhost:6002']\nlet cur_server_index = 0\napp.get('/api/square', (req, res) =&gt; {\n    try {\n        cur_server_index = (cur_server_index + 1) % servers.length\n        req\n            .pipe(request({\n                url: servers[cur_server_index] + req.originalUrl\n            }))\n            .pipe(res)\n    } catch (err) {\n        console.log(\"Error in /api/square: \", err)\n        res.status(500).json({ status: \"error\", error: err })\n    }\n})\n\napp.use('/*', createProxyMiddleware({\n    target: 'http://localhost:4000',\n    pathRewrite: (path, req) =&gt; req.baseUrl,\n    changeOrigin: true\n}))\n\n\nexport default app;\n</code></pre> <p>express-service-double/app.js</p> <pre><code>import express from 'express';\nimport path from 'path';\nimport cookieParser from 'cookie-parser';\nimport logger from 'morgan';\n\nimport usersRouter from './routes/users.js';\n\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nvar app = express();\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use('/users', usersRouter);\n\napp.get('/api/double', (req, res) =&gt; {\n    let num = req.query.num\n    let doubled = num * 2\n    res.send(\"\" + doubled)\n})\n\nexport default app;\n</code></pre> <p>express-service-square/app.js</p> <pre><code>import express from 'express';\nimport path from 'path';\nimport cookieParser from 'cookie-parser';\nimport logger from 'morgan';\n\nimport usersRouter from './routes/users.js';\n\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nvar app = express();\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use('/users', usersRouter);\n\napp.get('/api/square', (req, res) =&gt; {\n    let num = req.query.num\n    let squared = num * num\n    res.send(\"\" + squared)\n})\n\nexport default app;\n</code></pre> <p></p> <p></p>"},{"location":"INFO441/pterosaurs/","title":"Pterosaurs","text":"<p>Last modified: April 17, 2025</p> \u2190 Back"},{"location":"INFO441/pterosaurs/#pterosaurs-demo","title":"Pterosaurs demo","text":"<pre><code>DEMO_PTEROSAURS/\n\u251c\u2500\u2500 data/\n\u2502   \u2514\u2500\u2500 pterosaur.json\n\u251c\u2500\u2500 public/\n\u2502   \u251c\u2500\u2500 stylesheets/\n\u2502   \u251c\u2500\u2500 index.html\n\u2502   \u2514\u2500\u2500 index.js\n\u251c\u2500\u2500 routes/\n\u2502   \u251c\u2500\u2500 api.js\n\u2502   \u2514\u2500\u2500 users.js\n\u2514\u2500\u2500 app.js\n</code></pre> <p>app.js</p> <pre><code>import express from 'express';\nimport path from 'path';\nimport cookieParser from 'cookie-parser';\nimport logger from 'morgan';\n\nimport usersRouter from './routes/users.js';\nimport apiRouter from \"./routes/api.js\"\n\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nvar app = express();\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use('/users', usersRouter);\napp.use('/api', apiRouter)\n\nexport default app;\n</code></pre> <p>api.js</p> <pre><code>import express from 'express'\nimport { promises as fs } from 'fs'\n\nvar router = express.Router()\n\nrouter.get('/getPterosaurs', async (req, res) =&gt; {\n    const data = await fs.readFile(\"data/pterosaur.json\")\n    let pterosaurInfo = JSON.parse(data)\n\n    let filteredPterosaurInfo = \n        pterosaurInfo.filter(item =&gt; {\n            if (item.img != \"\") {\n                return true\n            }\n            else {\n                return false\n            }\n        })\n\n    res.json(filteredPterosaurInfo)\n});\n\nexport default router;\n</code></pre> <p>index.html</p> <pre><code>&lt;html&gt;\n\n  &lt;head&gt;\n    &lt;title&gt;Pterosaur&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"/stylesheets/style.css\"&gt;\n    &lt;script src=\"index.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;h1&gt;Pterosaur&lt;/h1&gt;\n    &lt;p&gt;See Pterosaur Deta!&lt;/p&gt;\n    &lt;button onClick=\"getPterosaurs()\"&gt;Load Pterosaurs&lt;/button&gt;\n    &lt;div id=\"results\"&gt;&lt;/div&gt;\n  &lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>index.js</p> <pre><code>async function getPterosaurs() {\n    let response = await fetch(\"api/getPterosaurs\")\n    let dataJson = await response.json()\n\n    let pterosaurHtml = dataJson.map(item =&gt; {\n        return `\n            &lt;div&gt;\n                &lt;p&gt;${item.Genus}&lt;/p&gt;\n                &lt;img src=${item.img} /&gt;\n            &lt;/div&gt;`\n    }).join(\"\")\n\n    document.getElementById(\"results\").innerHTML = pterosaurHtml\n}\n</code></pre>"},{"location":"INFO441/session/","title":"Session","text":"<p>Last modified: May 8, 2025</p> \u2190 Back"},{"location":"INFO441/session/#session-authentication","title":"Session (Authentication)","text":"<pre><code>demo1/\n\u251c\u2500\u2500 routes/\n\u2502   \u2514\u2500\u2500 users.js\n\u251c\u2500\u2500 public/\n\u2502   \u2514\u2500\u2500 index.html\n\u2502   \u2514\u2500\u2500 stylesheets/\n\u2502       \u2514\u2500\u2500 style.css\n\u2502   \u2514\u2500\u2500 javascripts/\n\u2502       \u2514\u2500\u2500 index.js\n\u2514\u2500\u2500 app.js\n</code></pre> <p>app.js</p> <pre><code>import express from 'express';\nimport path from 'path';\nimport cookieParser from 'cookie-parser';\nimport logger from 'morgan';\nimport sessions from 'express-session'\n\nimport usersRouter from './routes/users.js';\n\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nvar app = express();\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\nconst oneDay = 1000 * 60 * 60 * 24\napp.use(sessions({\n    secret: \"this is some secret key I am making up as9eu034htov9ny9yn3n\",\n    saveUninitialized: true,\n    cookie: {maxAge: oneDay},\n    resave: false\n}))\n\napp.use('/users', usersRouter);\n\nexport default app;\n</code></pre> <p>users.js</p> <pre><code>import express from 'express';\nvar router = express.Router();\n\n/* GET users listing. */\nrouter.get('/', function(req, res, next) {\n  if(req.session.userid){\n    res.send(`Here is the information for you (${req.session.userid})`)\n  } else{\n    res.status(401).send(\"Error: you must be logged in\")\n  }\n});\n\n\nrouter.post('/login', (req, res) =&gt; {\n\n  if(req.body.username == \"kylethayer\" &amp;&amp; req.body.password == \"asdasd\"){\n    req.session.userid = \"kylethayer\"\n    res.send(\"you logged in\")\n  } else if(req.body.username == \"anotheruser\" &amp;&amp; req.body.password == \"pwd\"){\n    req.session.userid = \"anotheruser\"\n    res.send(\"you logged in\")\n  } else {\n    res.send(\"wrong login info\")\n  }\n})\n\nrouter.post('/logout', (req, res) =&gt; {\n  req.session.destroy()\n  res.send(\"you are logged out\")\n})\n\nexport default router;\n</code></pre> <p>index.html</p> <pre><code>&lt;html&gt;\n\n&lt;head&gt;\n  &lt;title&gt;Express&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" href=\"/stylesheets/style.css\"&gt;\n  &lt;script src=\"javascripts/index.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;Express&lt;/h1&gt;\n  &lt;p&gt;Welcome to Express&lt;/p&gt;\n  &lt;a href=\"/users/\"&gt;Get your user info&lt;/a&gt;\n  &lt;h3&gt;login&lt;/h3&gt;\n  Username: &lt;input type=text id=\"username_input\"&gt;&lt;/input&gt;&lt;br&gt;\n  Password: &lt;input type=text id=\"password_input\"&gt;&lt;/input&gt;\n  &lt;button onclick=\"login()\"&gt;Log in&lt;/button&gt; \n  &lt;button onclick=\"logout()\"&gt;Log out&lt;/button&gt;\n  &lt;div id=\"results\"&gt;&lt;/div&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>index.js</p> <pre><code>async function login(){\n    let username = document.getElementById(\"username_input\").value\n    let password = document.getElementById(\"password_input\").value\n    let loginData = {\n        username: username,\n        password: password\n    } \n    let response = await fetch(\n        \"/users/login\",\n        {\n            method: \"POST\",\n            body: JSON.stringify(loginData),\n            headers: {\n                'Content-Type': 'application/json'\n              }\n        }\n    );\n    let responesText = await response.text();\n    document.getElementById(\"results\").innerText = responesText;\n}\n\nasync function logout(){\n    let response = await fetch(\n        '/users/logout',\n        {\n            method: \"POST\"\n        }\n    )\n    let responesText = await response.text();\n    document.getElementById(\"results\").innerText = responesText;\n}\n</code></pre>"},{"location":"INFO441/simpleTemplate/","title":"simpleTemplate","text":"<p>Last modified: April 14, 2025</p> \u2190 Back"},{"location":"INFO441/simpleTemplate/#template-for-a-simple-web-server","title":"Template for a simple web server","text":"<pre><code>import { promises as fs } from 'fs'\nimport express from 'express'\nconst app = express()\n\napp.get(\"/\", async (req, res) =&gt; {\n    console.log(\"got a request for /\")\n    res.type('html')\n    let fileContents = await fs.readFile(\"index.html\")\n    res.send(fileContents)\n})\n\napp.get(\"/style.css\", async (req, res) =&gt; {\n    console.log(\"got a request for style.css\")\n    res.type(\"css\")\n    let fileContent = await fs.readFile(\"style.css\")\n    res.send(fileContent)\n})\n\napp.listen(3000, () =&gt; {\n    console.log(\"Example app listening at http://localhost:3000\")\n})\n\n</code></pre>"},{"location":"INFO441/sqlinjection/","title":"Sqlinjection","text":"<p>Last modified: April 21, 2025</p> \u2190 Back"},{"location":"INFO441/sqlinjection/#sql-injection","title":"SQL Injection","text":"<p>SQL Injection - vulnerability that occurs when an application allows a user to insert or \u201cinject\u201d arbitrary SQL code into a query</p> <p></p> <p>app.js</p> <pre><code>import express from 'express';\nimport path from 'path';\nimport cookieParser from 'cookie-parser';\nimport logger from 'morgan';\n\nimport usersRouter from './routes/users.js';\n\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nvar app = express();\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use('/users', usersRouter);\n\nexport default app;\n</code></pre> <p>routes/user.js</p> <pre><code>import sqlite3 from 'sqlite3'\nimport express from 'express';\nvar router = express.Router();\n\n// create/load database\nlet db = new sqlite3.Database(':memory:', (err) =&gt; {\n  if(err){\n    return console.error(err.message)\n  }\n  console.log(\"Connected to the in-memory sqlite database\")\n})\n\ndb.serialize(() =&gt; {\n  db\n    .run('CREATE TABLE people(first_name text, last_name text)')\n    .run(`INSERT INTO people(first_name, last_name)\n          VALUES (\"Kyle\", \"Thayer\"),\n                 (\"Kyle\", \"Chandler\"),\n                 (\"David\", \"Pham\")\n      `)\n    .run('CREATE TABLE secret_table(message text)')\n    .run(`INSERT INTO secret_table(message)\n        VALUES ('The password for Kyle is: pa55w0rd'),\n               ('The treasure is hidden on the 5th floor')\n      `)\n})\n\n/* GET users listing. */\nrouter.get('/', function(req, res, next) {\n  let nameSearch = req.query.nameSearch\n  nameSearch = nameSearch ? nameSearch : \"\"\n\n  db.all(`SELECT * FROM people WHERE first_name = \"${nameSearch}\"`,\n    (err, allRows) =&gt; {\n      if(err){\n        console.log(\"db error: \" + err)\n        res.send(\"db error: \" + err)\n        return \n      }\n      if(!allRows){\n        res.send(\"no matches\")\n        return \"\"\n      }\n      const matchingPeople = allRows.map(\n        row =&gt; `${row.first_name} ${row.last_name}`\n      ).join(\"\\n\")\n      res.send(matchingPeople)\n    }\n  )\n});\n\nexport default router;\n</code></pre>"},{"location":"INFO441/testing/","title":"Testing","text":"<p>Last modified: May 19, 2025</p> \u2190 Back"},{"location":"INFO441/testing/#testing","title":"Testing","text":""},{"location":"INFO441/testing/#non-automated-testing","title":"NON-automated testing","text":"<ul> <li> <p>Click around and try things yourself!</p> </li> <li> <p>Manual testing (team): usually has a list of things to click through</p> </li> <li> <p>User (research) testing: give users your site and let them click around</p> </li> </ul>"},{"location":"INFO441/testing/#automated-testing-of-code","title":"Automated Testing of Code","text":"<ul> <li> <p>Definition: Automated tests are additional code that tests the code of a project</p> <ul> <li>This includes how things should go correctly AND incorrectly</li> </ul> </li> <li> <p>Types of Tests</p> <ul> <li> <p>Unit tests: test ONE thing</p> </li> <li> <p>Integration Tests: isolate and test code that calls other code, for example, is this code connecting to the db?</p> </li> <li> <p>System Tests/E2E Tests: test the overall system; E2E is the flow end-to-end, System is in the context of a prod-like environment</p> </li> <li> <p>Stress Tests: test what happens when parts of the system fail</p> </li> </ul> </li> <li> <p>Strategies:</p> <ul> <li> <p>Running Tests: Continuous Integration Testing</p> </li> <li> <p>How do we know our tests are right?</p> <ul> <li> <p>Code Coverage</p> </li> <li> <p>We don\u2019t know (Skype/postmortems/rollbacks)</p> </li> </ul> </li> <li> <p>Best practices:</p> <ul> <li> <p>When something breaks in prod, the fix should include a test that would have caught that change/error</p> </li> <li> <p>CI/CD testing: on PR, if something new is broken, block merge</p> </li> </ul> </li> </ul> </li> </ul> <p></p> <p><code>npm install --save-dev &lt;package&gt;</code></p> <ul> <li> <p>Installs the package as a development dependency.</p> </li> <li> <p>Adds it to the <code>\"devDependencies\"</code> section in <code>package.json</code>.</p> </li> <li> <p>Used when the package is only needed during development (e.g. for testing, building, or linting).</p> </li> </ul> <p><code>npm test</code> run test in project</p> <p></p> <p>app.test.js</p> <pre><code>import { assert } from 'chai'\nimport request from 'supertest'\n\nimport app from '../app.js'\n\ndescribe('Static server', () =&gt; {\n    it('should return index.html if it is requested', async () =&gt; {\n        const res = await request(app).get('/index.html')\n\n        assert.equal(res.statusCode, 200)\n\n        assert.include(\n            res.text,\n            '&lt;script src=\"javascripts/index.js\"&gt;&lt;/script&gt;',\n            \"body has html code we recognize from index.html\"\n        )\n    })\n\n    it(\"should return 404 for a non-existing file\", async() =&gt; {\n        const res = await request(app).get(\"/fdmaifodamsf.html\")\n        assert.equal(res.statusCode, 404)\n    })\n})\n</code></pre> <p>example.test.js</p> <pre><code>import assert from 'assert'\n\ndescribe('DemoTest', () =&gt; {\n    it('should say 2+2 = 4', () =&gt; {\n        assert.equal(2+2, 4)\n    })\n\n    it(\"should say 4+4 = 8\", () =&gt; {\n        assert.equal(4+4, 8)\n    })\n\n        it(\"should say 1+1 = 3\", () =&gt; {\n        assert.equal(1+1, 3)\n    })\n})\n</code></pre> <p>items.test.js</p> <pre><code>import { assert } from 'chai'\nimport request from 'supertest'\n\nimport app from '../app.js'\n\ndescribe('Items integration test (with database)', () =&gt; {\n    it('should get items from the db for GET items', async () =&gt; {\n        const res = await request(app).get('/items')\n\n        assert.equal(res.statusCode, 200)\n        assert.equal(res.type, 'application/json')\n\n        assert.isArray(res.body)\n        assert.include(res.body[0], {\n            name: \"apple\", \n            price: 2.99\n        })\n    })\n})\n</code></pre> <p>package.json</p> <pre><code>{\n  \"name\": \"express-starter\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"scripts\": {\n    \"start\": \"node ./bin/www\",\n    \"test\": \"mocha\"\n  },\n  \"dependencies\": {\n    \"cookie-parser\": \"~1.4.4\",\n    \"debug\": \"~2.6.9\",\n    \"express\": \"^4.19.2\",\n    \"express-session\": \"^1.17.2\",\n    \"mongoose\": \"^6.0.11\",\n    \"morgan\": \"~1.9.1\",\n    \"stripe\": \"^9.0.0\"\n  },\n  \"devDependencies\": {\n    \"mocha\": \"^11.4.0\"\n  }\n}\n</code></pre>"},{"location":"INFO441/useractions/","title":"Useractions","text":"<p>Last modified: May 13, 2025</p> \u2190 Back"},{"location":"INFO441/useractions/#user-actions","title":"User Actions","text":"<pre><code>demo/\n\u251c\u2500\u2500 routes/\n\u2502   \u2514\u2500\u2500 api/\n\u2502       \u2514\u2500\u2500 v1/\n\u2502           \u2514\u2500\u2500 apiv1.js\n\u2502           \u2514\u2500\u2500 controllers/\n\u2502               \u2514\u2500 users.js\n\u251c\u2500\u2500 public/\n\u2502   \u2514\u2500\u2500 index.html\n\u2502   \u2514\u2500\u2500 stylesheets/\n\u2502       \u2514\u2500\u2500 style.css\n\u2502   \u2514\u2500\u2500 javascripts/\n\u2502       \u2514\u2500\u2500 index.js\n\u251c\u2500\u2500 models.js\n\u2514\u2500\u2500 app.js\n</code></pre> <p>app.js</p> <pre><code>import express from 'express';\nimport path from 'path';\nimport cookieParser from 'cookie-parser';\nimport logger from 'morgan';\n\nimport apiv1Router from './routes/api/v1/apiv1.js'\n\nimport models from './models.js'\n\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nvar app = express();\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use((req, res, next) =&gt; {\n    req.models = models\n    next()\n})\n\napp.use('/api/v1', apiv1Router)\n\nexport default app;\n</code></pre> <p>models.js</p> <pre><code>import mongoose from \"mongoose\"\n\nconst models = {}\n\nconsole.log(\"Tryin to connect to mongodb\")\nawait mongoose.connect(\"mongodb+srv://&lt;username&gt;:&lt;pw&gt;@cluster0.i36zdqv.mongodb.net/playlists\")\n\nconsole.log(\"successfully connected to mondogb\")\n\nconst userSchema = new mongoose.Schema({\n    username: String,\n    favorite_bands: [String]\n})\n\nmodels.User = mongoose.model(\"User\", userSchema)\n\nconsole.log(\"successfully created db\")\n\nexport default models\n</code></pre> <p>apiv1.js</p> <pre><code>import express from 'express'\nconst router = express.Router()\n\nimport usersRouter from './controllers/users.js'\n\nrouter.use('/users', usersRouter)\n\nexport default router\n</code></pre> <p>users.js</p> <pre><code>import express from 'express'\nconst router = express.Router()\n\nrouter.get('/', async (req, res) =&gt; {\n    try {\n        let allUsers = await req.models.User.find()\n        res.json(allUsers)\n    } catch(error) {\n        console.log(\"error\", err)\n        res.status(500).json({status: \"server error\"})\n    }\n})\n\nrouter.post('/', async (req, res) =&gt; {\n    try {\n        const username = req.body.username\n\n        let newUser = new req.models.User({\n            username: username\n        })\n\n        await newUser.save()\n\n        res.json({status: 'success'})\n    } catch(error) {\n        console.log(\"error\", err)\n        res.status(500).json({status: \"server error\"})\n    }\n})\n\nrouter.post('/bands', async (req, res) =&gt; {\n    let userId = req.body.userId\n    let band = req.body.band\n\n    // find the right user\n    let user = await req.models.User.findById(userId)\n\n    // update with the new band\n    if(!user.favorite_bands.includes(band)){\n        user.favorite_bands.push(band)\n    }\n\n    // save\n    await user.save()\n    res.json({status: 'success'})\n})\n\nexport default router\n</code></pre> <p>index.html</p> <pre><code>&lt;html&gt;\n\n&lt;head&gt;\n  &lt;title&gt;Info upload&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" href=\"/stylesheets/style.css\"&gt;\n  &lt;script src=\"javascripts/index.js\" &gt;&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;Playlist&lt;/h1&gt;\n  &lt;h2&gt;Add User&lt;/h2&gt;\n  Name: &lt;input id=\"name_input\" type=text /&gt;\n  &lt;br&gt;\n  &lt;button onclick = \"addUser()\"&gt;Add User&lt;/button&gt;\n  &lt;div id=\"results\"&gt;&lt;/div&gt;\n\n  &lt;hr&gt;\n  &lt;h2&gt;All users&lt;/h2&gt;\n  &lt;button onclick=\"loadUsers()\"&gt;Load Users&lt;/button&gt;\n  &lt;div id=\"allusersdiv\"&gt;\n    click \"Load Users\" to see users\n  &lt;/div&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>index.js</p> <pre><code>async function addUser(){\n    let name = document.getElementById(\"name_input\").value\n\n    await fetch(\"/api/v1/users\", {\n        method: \"POST\",\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({username: name})\n    })\n}\n\nasync function loadUsers(){\n    document.getElementById(\"allusersdiv\").innerText = \"loading...\"\n\n    let response = await fetch(\"/api/v1/users\")\n    let usersJson = await response.json()\n\n    let usersHTML = usersJson.map(userInfo =&gt; {\n        return `\n        &lt;hr&gt;\n        &lt;div&gt;\n            &lt;h3&gt;\n                Username: ${userInfo.username}\n                &lt;button onclick=\"deleteUser('${userInfo._id}')\"&gt;Delete&lt;/button&gt;\n            &lt;/h3&gt;\n            &lt;strong&gt;Favorite Bands:&lt;/strong&gt; ${userInfo.favorite_bands ? userInfo.favorite_bands.join(\", \") : \"\" } &lt;br&gt;\n            &lt;strong&gt;Add Band:&lt;/strong&gt; &lt;input type=\"text\" id=\"add_band_text_${userInfo._id}\" /&gt;\n            &lt;button onclick=\"addBand('${userInfo._id}')\"&gt;Add Band&lt;/button&gt;\n\n            &lt;h3&gt;Playlists&lt;/h3&gt;\n            &lt;div id=\"playlist_div_${userInfo._id}\"&gt;Loading playlists...&lt;/div&gt;\n\n            &lt;h3&gt;Add Playlist&lt;/h3&gt;\n            &lt;strong&gt;Title:&lt;/strong&gt; &lt;input type=\"text\" id=\"add_playlist_title_text_${userInfo._id}\" /&gt; &lt;br&gt;\n            &lt;strong&gt;Songs:&lt;/strong&gt; &lt;input type=\"text\" id=\"add_playlist_song_text_${userInfo._id}\" /&gt; &lt;br&gt;\n            &lt;button onclick=\"addPlaylist('${userInfo._id}')\"&gt;Add Playlist&lt;/button&gt;\n        &lt;/div&gt;\n        `\n    }).join(\"&lt;hr&gt;\")\n\n    document.getElementById(\"allusersdiv\").innerHTML = usersHTML \n\n    usersJson.forEach(userInfo =&gt; {\n        loadPlaylistsForUser(userInfo._id)\n    })\n}\n\nasync function loadPlaylistsForUser(userId){\n    // get playlists for that user\n    let response = await fetch(\"/api/v1/playlists?userId=\" + userId)\n    let playlistJSON = await response.json()\n\n    // add html to the right div for that user\n    let playlistHTML = playlistJSON.map(playalistInfo =&gt; {\n        return `\n        &lt;div&gt;\n            &lt;h4&gt;Playlist: ${playalistInfo.title}&lt;/h4&gt;\n            &lt;strong&gt;Songs:&lt;/strong&gt; ${playalistInfo.songs}\n        &lt;/div&gt;\n        `\n    }).join(\"\")\n\n    document.getElementById(\"playlist_div_\" + userId).innerHTML = playlistHTML\n\n}\n\nasync function addPlaylist(id){\n    let title = document.getElementById(\"add_playlist_title_text_\" + id).value\n    let songs = document.getElementById(\"add_playlist_song_text_\" + id).value\n\n    await fetch(\"/api/v1/playlists\", {\n        method: \"POST\",\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({\n            title: title,\n            songs: songs,\n            userId: id\n        })\n    })\n\n}\n\nasync function addBand(id){\n    let bandToAdd = document.getElementById(\"add_band_text_\" + id).value\n\n    await fetch(\"/api/v1/users/bands\", {\n        method: \"POST\",\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({\n            userId: id,\n            band: bandToAdd\n        })\n    })\n}\n\nasync function deleteUser(id){\n    await fetch(\"/api/v1/users\", {\n        method: \"DELETE\",\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({\n            userId: id\n        })\n    })\n}\n</code></pre>"},{"location":"INFO441/useractions2/","title":"Useractions2","text":"<p>Last modified: May 18, 2025</p> \u2190 Back"},{"location":"INFO441/useractions2/#user-actions-part-2","title":"User Actions Part 2","text":"<pre><code>demo/\n\u251c\u2500\u2500 routes/\n\u2502   \u2514\u2500\u2500 api/\n\u2502       \u2514\u2500\u2500 v1/\n\u2502           \u2514\u2500\u2500 apiv1.js\n\u2502           \u2514\u2500\u2500 controllers/\n\u2502               \u2514\u2500 users.js\n\u251c\u2500\u2500 public/\n\u2502   \u2514\u2500\u2500 index.html\n\u2502   \u2514\u2500\u2500 stylesheets/\n\u2502       \u2514\u2500\u2500 style.css\n\u2502   \u2514\u2500\u2500 javascripts/\n\u2502       \u2514\u2500\u2500 index.js\n\u251c\u2500\u2500 models.js\n\u2514\u2500\u2500 app.js\n</code></pre> <p>app.js</p> <pre><code>import express from 'express';\nimport path from 'path';\nimport cookieParser from 'cookie-parser';\nimport logger from 'morgan';\n\nimport apiv1Router from './routes/api/v1/apiv1.js'\n\nimport models from './models.js'\n\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nvar app = express();\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use((req, res, next) =&gt; {\n    req.models = models\n    next()\n})\n\napp.use('/api/v1', apiv1Router)\n\nexport default app;\n</code></pre> <p>models.js</p> <pre><code>import mongoose from \"mongoose\"\n\nconst models = {}\n\nconsole.log(\"Trying to connect to mongodb\")\nawait mongoose.connect(\"mongodb+srv://vkuhhyuguhvgfythgvygvtfcvghyvfvh this is a random str\")\n\nconsole.log(\"successfully connected to mongodb\")\n\nconst userSchema = new mongoose.Schema({\n    username: String,\n    favorite_bands: [String]\n})\n\nmodels.User = mongoose.model(\"User\", userSchema)\n\nconst playlistSchema = new mongoose.Schema({\n    title: String,\n    songs: String,\n    user: {type: mongoose.Schema.Types.ObjectId, ref: \"User\"}\n})\n\nmodels.Playlist = mongoose.model(\"Playlist\", playlistSchema)\n\nconsole.log(\"successfully created database models\")\n\nexport default models\n</code></pre> <p>apiv1.js</p> <pre><code>import express from 'express'\nconst router = express.Router()\n\nimport usersRouter from './controllers/users.js'\nimport playlistsRouter from './controllers/playlists.js'\n\nrouter.use('/users', usersRouter)\nrouter.use('/playlists', playlistsRouter)\n\nexport default router\n</code></pre> <p>users.js</p> <pre><code>import express from 'express'\nconst router = express.Router()\n\nrouter.get('/', async (req, res) =&gt; {\n    try{\n        let allUsers = await req.models.User.find()\n        res.json(allUsers)\n    } catch(err){\n        console.log(\"error\", err)\n        res.status(500).json({status: \"server error\"})\n    }\n})\n\nrouter.post('/', async (req, res) =&gt; {\n    try{\n        const username = req.body.username\n        let newUser = new req.models.User({\n            username: username\n        })\n\n        await newUser.save()\n\n        res.json({status: 'success'})\n    } catch(err){\n        console.log(\"error\", err)\n        res.status(500).json({status: \"server error\"})\n    }\n})\n\nrouter.delete('/', async (req, res) =&gt; {\n    let userId = req.body.userId\n\n    // delete all playlists for the user, then the user itself\n    await req.models.Playlist.deleteMany({user: userId})\n    await req.models.User.deleteOne({_id: userId})\n\n    res.send({status: \"success\"})\n})\n\nrouter.post('/bands', async (req, res) =&gt; {\n    let userId = req.body.userId\n    let band = req.body.band\n\n    // find the right user\n    let user = await req.models.User.findById(userId)\n\n    // update with the new band (if it wasn't already there)\n    if(!user.favorite_bands.includes(band)){\n        user.favorite_bands.push(band)\n    }\n\n    // save\n    await user.save()\n    res.json({status: 'success'})\n    // TODO: catch errors\n})\n\nexport default router\n</code></pre> <p>index.html</p> <pre><code>&lt;html&gt;\n\n&lt;head&gt;\n  &lt;title&gt;Info upload&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" href=\"/stylesheets/style.css\"&gt;\n  &lt;script src=\"javascripts/index.js\" &gt;&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;Playlist&lt;/h1&gt;\n  &lt;h2&gt;Add User&lt;/h2&gt;\n  Name: &lt;input id=\"name_input\" type=text /&gt;\n  &lt;br&gt;\n  &lt;button onclick = \"addUser()\"&gt;Add User&lt;/button&gt;\n  &lt;div id=\"results\"&gt;&lt;/div&gt;\n\n  &lt;hr&gt;\n  &lt;h2&gt;All users&lt;/h2&gt;\n  &lt;button onclick=\"loadUsers()\"&gt;Load Users&lt;/button&gt;\n  &lt;div id=\"allusersdiv\"&gt;\n    click \"Load Users\" to see users\n  &lt;/div&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>index.js</p> <pre><code>async function addUser(){\n    let name = document.getElementById(\"name_input\").value\n\n    await fetch(\"/api/v1/users\", {\n        method: \"POST\",\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({username: name})\n    })\n}\n\nasync function loadUsers(){\n    document.getElementById(\"allusersdiv\").innerText = \"loading...\"\n\n    let response = await fetch(\"/api/v1/users\")\n    let usersJson = await response.json()\n\n    let usersHTML = usersJson.map(userInfo =&gt; {\n        return `\n        &lt;hr&gt;\n        &lt;div&gt;\n            &lt;h3&gt;\n                Username: ${userInfo.username}\n                &lt;button onclick=\"deleteUser('${userInfo._id}')\"&gt;Delete&lt;/button&gt;\n            &lt;/h3&gt;\n            &lt;strong&gt;Favorite Bands:&lt;/strong&gt; ${userInfo.favorite_bands ? userInfo.favorite_bands.join(\", \") : \"\"} &lt;br&gt;\n            &lt;strong&gt;Add Band:&lt;/strong&gt; &lt;input type=\"text\" id=\"add_band_text_${userInfo._id}\" /&gt;\n            &lt;button onclick=\"addBand('${userInfo._id}')\"&gt;Add Band&lt;/button&gt;\n\n            &lt;h3&gt;Playlists&lt;/h3&gt;\n            &lt;div id=\"playlist_div_${userInfo._id}\"&gt;Loading playlists...&lt;/div&gt;\n\n            &lt;h3&gt;Add Playlist&lt;/h3&gt;\n            &lt;strong&gt;Title:&lt;/strong&gt; &lt;input type=\"text\" id=\"add_playlist_title_text_${userInfo._id}\" /&gt; &lt;br&gt;\n            &lt;strong&gt;Songs:&lt;/strong&gt; &lt;input type=\"text\" id=\"add_playlist_song_text_${userInfo._id}\" /&gt; &lt;br&gt;\n            &lt;button onclick=\"addPlaylist('${userInfo._id}')\"&gt;Add Playlist&lt;/button&gt;\n        &lt;/div&gt;\n        `\n    }).join(\"&lt;hr&gt;\")\n\n    document.getElementById(\"allusersdiv\").innerHTML = usersHTML \n\n    usersJson.forEach(userInfo =&gt; {\n        loadPlaylistsForUser(userInfo._id)\n    })\n}\n\nasync function loadPlaylistsForUser(userId){\n    // get playlists for that user\n    let response = await fetch(\"/api/v1/playlists?userId=\" + userId)\n    let playlistJSON = await response.json()\n\n    // add html to the right div for that user\n    let playlistHTML = playlistJSON.map(playalistInfo =&gt; {\n        return `\n        &lt;div&gt;\n            &lt;h4&gt;Playlist: ${playalistInfo.title}&lt;/h4&gt;\n            &lt;strong&gt;Songs:&lt;/strong&gt; ${playalistInfo.songs}\n        &lt;/div&gt;\n        `\n    }).join(\"\")\n\n    document.getElementById(\"playlist_div_\" + userId).innerHTML = playlistHTML\n\n}\n\nasync function addPlaylist(id){\n    let title = document.getElementById(\"add_playlist_title_text_\" + id).value\n    let songs = document.getElementById(\"add_playlist_song_text_\" + id).value\n\n    await fetch(\"/api/v1/playlists\", {\n        method: \"POST\",\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({\n            title: title,\n            songs: songs,\n            userId: id\n        })\n    })\n\n}\n\nasync function addBand(id){\n    let bandToAdd = document.getElementById(\"add_band_text_\" + id).value\n\n    await fetch(\"/api/v1/users/bands\", {\n        method: \"POST\",\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({\n            userId: id,\n            band: bandToAdd\n        })\n    })\n}\n\nasync function deleteUser(id){\n    await fetch(\"/api/v1/users\", {\n        method: \"DELETE\",\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({\n            userId: id\n        })\n    })\n}\n</code></pre>"},{"location":"INFO441/userdatamongo/","title":"Userdatamongo","text":"<p>Last modified: April 17, 2025</p> \u2190 Back"},{"location":"INFO441/userdatamongo/#user-data-demo-mongodb","title":"User Data Demo (MongoDB)","text":"<pre><code>USER_DATA/\n\u251c\u2500\u2500 routes/\n\u2502   \u2514\u2500\u2500 api.js\n\u2502   \u2514\u2500\u2500 users.js\n\u251c\u2500\u2500 public/\n\u2502   \u2514\u2500\u2500 index.html\n\u2502   \u2514\u2500\u2500 index.js\n\u2502   \u2514\u2500\u2500 stylesheets/\n\u2502       \u2514\u2500\u2500 style.css\n\u251c\u2500\u2500 models.js\n\u2514\u2500\u2500 app.js\n</code></pre> <p>app.js</p> <pre><code>import express from 'express';\nimport path from 'path';\nimport cookieParser from 'cookie-parser';\nimport logger from 'morgan';\n\nimport models from \"./models.js\"\n\nimport usersRouter from './routes/users.js';\nimport apiRouter from './routes/api.js'\n\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nvar app = express();\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use((req, res, next) =&gt; {\n    req.models = models\n    next()\n})\n\napp.use('/users', usersRouter);\napp.use('/api', apiRouter)\n\n\nexport default app;\n</code></pre> <p>model.js</p> <pre><code>import mongoose from 'mongoose'\n\nconst models = {}\n\nconsole.log(\"connecting to mongodb\")\n\nawait mongoose.connect(\"mongodb+srv://&lt;myusername&gt;:&lt;mypw&gt;@cluster0.i36zdqv.mongodb.net/&lt;tablename&gt;\")\n\nconsole.log(\"successfully connected to mongodb!\")\n\nconst userSchema = new mongoose.Schema({\n    first_name: String,\n    last_name: String,\n    favorite_ice_cream: String\n})\n\nmodels.User = mongoose.model('User', userSchema)\n\nconsole.log(\"finished creating models\")\n\nexport default models\n</code></pre> <p>api.js</p> <pre><code>import { promises as fs } from 'fs'\nimport express from 'express'\nconst router = express.Router();\n\nrouter.get('/getUsers', async (req, res) =&gt; {\n    let allUsers = await req.models.User.find()\n    res.json(allUsers)\n})\n\nrouter.post('/users', async (req, res) =&gt; {\n    console.log(req.body)\n\n    const newUser = new req.models.User({\n        first_name: req.body.first_name,\n        last_name: req.body.last_name,\n        favorite_ice_cream: req.body.favorite_ice_cream\n    })\n\n    await newUser.save()\n\n    res.send(\"success\")\n})\n\nexport default router;\n</code></pre> <p>users.js</p> <pre><code>import express from 'express';\nvar router = express.Router();\n\nrouter.get('/', function(req, res, next) {\n  res.send('respond with a resource');\n});\n\nexport default router;\n</code></pre> <p>index.html</p> <pre><code>&lt;html&gt;\n\n&lt;head&gt;\n  &lt;title&gt;User Info Uploader&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" href=\"/stylesheets/style.css\"&gt;\n  &lt;script src=\"index.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;User Info Uploader&lt;/h1&gt;\n  First Name: &lt;input type=\"text\" id=\"first_name_input\" /&gt;\n  &lt;br&gt;\n  &lt;br&gt;\n  Last Name: &lt;input type=\"text\" id=\"last_name_input\" /&gt;\n  &lt;br&gt;\n  &lt;br&gt;\n  Favorite Ice Cream: &lt;input type=\"text\" id=\"favorite_ice_cream_input\" /&gt;\n  &lt;br&gt;\n  &lt;br&gt;\n  &lt;button onclick=\"createUser()\"&gt;Create User&lt;/button&gt;\n  &lt;br&gt;\n  &lt;br&gt;\n  &lt;button onclick=\"getUsers()\"&gt;Load Users&lt;/button&gt;\n  &lt;div id=\"results\"&gt;&lt;/div&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>index.js</p> <pre><code>async function getUsers(){\n    let response = await fetch(\"api/getUsers\")\n    let dataJson = await response.json()\n\n    document.getElementById(\"results\").innerHTML = JSON.stringify(dataJson)\n}\n\nasync function createUser(){\n    // data from html\n    let first_name = document.getElementById(\"first_name_input\").value\n    let last_name = document.getElementById(\"last_name_input\").value\n    let favorite_ice_cream = document.getElementById(\"favorite_ice_cream_input\").value\n\n    let myData = {\n        first_name: first_name,\n        last_name: last_name,\n        favorite_ice_cream: favorite_ice_cream\n    }\n    // send the data to server as a \"POST\" request\n    const response = await fetch('api/users', {\n        method: \"POST\",\n        body: JSON.stringify(myData),\n        headers: {\n            'Content-Type' : 'application/json'\n        }\n    })\n}\n</code></pre>"},{"location":"INFO441/websockets/","title":"Websockets","text":"<p>Last modified: July 20, 2025</p> \u2190 Back"},{"location":"INFO441/websockets/#websockets","title":"Websockets","text":"<p>How does our view (browser) get live updates? (e.g., new posts, chat messages)  </p> <ul> <li>One solution is polling, that is, keeping sending a request to the server asking \"is there anything new?\"</li> </ul> <p>websockets</p> <ul> <li>create a connection where messages can be sent at any time in either direction</li> </ul> <p></p> <p>app.js</p> <pre><code>import express from 'express'\nimport enableWs from 'express-ws'\n\nconst app = express()\nenableWs(app)\n\n// track websocket connections\nlet socketCounter = 1\nlet allSockets = []\n\napp.ws('/chatSocket', (ws, res) =&gt; {\n    const mySocketNum = socketCounter\n    socketCounter++\n    console.log(`user ${mySocketNum} connected`)\n\n    // add this ws to the global array tracking all websockets\n    allSockets.push(ws)\n\n    ws.on('message', (chat) =&gt; {\n        console.log(`chat (user ${mySocketNum}): ${chat}`)\n        allSockets.forEach(socket =&gt; {\n            socket.send(mySocketNum + \": \" + chat)\n        })\n    })\n\n    ws.on('close', () =&gt; {\n        console.log(`user ${mySocketNum} disconnected`)\n        console.log(\"I should probably delete them from the array or something\")\n    })\n})\n\napp.get('/', (req, res) =&gt; {\n    res.sendFile(process.cwd() + \"/index.html\")\n})\n\napp.listen(3000, () =&gt; {\n    console.log(\"Example app listening at http://localhost:3000\")\n})\n</code></pre> <p>index.html</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;script&gt;\n        const socketURL = \"ws://localhost:3000/chatSocket\"\n        let webSocket = new WebSocket(socketURL)\n\n        function sendChat() {\n            let chatMsg = document.getElementById(\"textInput\").value\n            webSocket.send(chatMsg)\n        }\n\n        webSocket.onmessage = (event) =&gt; {\n            const chat = event.data\n            document.getElementById(\"output\")\n                .innerText += chat + \"\\n\"\n        }\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Web socket chat demo!&lt;/h1&gt;\n\n    &lt;input type=\"text\" id=\"textInput\" /&gt;\n    &lt;button id=\"sendBtn\" onclick=\"sendChat()\"&gt;send&lt;/button&gt;\n\n    &lt;h3&gt;chat history&lt;/h3&gt;\n    &lt;div id = \"output\"&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"INFO441/xss/","title":"Xss","text":"<p>Last modified: May 20, 2025</p> \u2190 Back"},{"location":"INFO441/xss/#xss","title":"XSS","text":"<p>Cross Site Scripting Attacks</p> <ul> <li>vulnerability that allows attackers to inject malicious scripts into web pages viewed by other users  </li> </ul> <p></p> <pre><code>import * as cheerio from 'cheerio';\nimport express from 'express';\nconst app = express();\n\n\nconst escapeHTML = str =&gt; String(str).replace(/[&amp;&lt;&gt;'\"]/g, \n    tag =&gt; ({\n        '&amp;': '&amp;amp;',\n        '&lt;': '&amp;lt;',\n        '&gt;': '&amp;gt;',\n        \"'\": '&amp;#39;',\n        '\"': '&amp;quot;'\n      }[tag]));\n\n\n// This string mocks what a user might *try* to input on the client side of your site... \n// you should not allow this/clean it up\nconst userInputWithHTML = \"&lt;span id=userInput&gt;Don't allow &lt;em&gt;tags&lt;/em&gt; to be &lt;strong&gt;rendered&lt;/strong&gt;&lt;/span&gt;\"\n\n// This function mocks the unsafe way of doing this: it doesn't clean the string\n// or check if anything vulnerable is in here. When you see it rendered, you'll notice \n// that user inputted &lt;em&gt; and &lt;strong&gt; remain\nfunction vulnerableAddUserInput(){\n  return `\n  &lt;p&gt;\n  &lt;strong&gt;Here is the user input:&lt;/strong&gt; ${userInputWithHTML}\n  &lt;/p&gt;\n  `\n}\n\n// use an excapeHTML function to clean the user input first\nfunction fixWithFunction () {\n  return `\n  &lt;p&gt;\n  &lt;strong&gt;Here is the user input: &lt;/strong&gt; ${escapeHTML(userInputWithHTML)}\n  &lt;/p&gt;\n  `\n}\n\nfunction fixWithInnerText() {\n  let htmlString = `\n  &lt;p&gt;\n  &lt;strong&gt;Here is the user input: &lt;/strong&gt; &lt;span id='userInput1'&gt;&lt;/span&gt;\n  `\n\n  const parsedHTML = cheerio.load(htmlString)\n  parsedHTML(\"#userInput1\").text(userInputWithHTML)\n  return parsedHTML.html()\n}\n\n// Below are the sections we'll be working though to learn how to avoid XSS\napp.get('/', (req, res) =&gt; {\n  res.send(`\n  &lt;html&gt;&lt;body&gt;\n  &lt;h1&gt; demo for xss escaping&lt;/h1&gt;\n\n  &lt;h2&gt; vulnerable user input &lt;/h2&gt;\n  ${vulnerableAddUserInput()}\n\n  &lt;h2&gt; fix with function &lt;/h2&gt;\n  ${fixWithFunction()}\n\n  &lt;h2&gt; fix with inner HTML &lt;/h2&gt;\n  ${fixWithInnerText()}\n\n  &lt;/body&gt;\n  &lt;/html&gt;\n  `)\n})\n\napp.listen(3000, ()=&gt;{\n  console.log('Example app listening at http://localhost:3000')\n})\n</code></pre>"},{"location":"INFO449/Basics/","title":"Basics","text":"<p>Last modified: April 14, 2025</p> \u2190 Back"},{"location":"INFO449/Basics/#basics","title":"Basics","text":""},{"location":"INFO449/Basics/#variable-types","title":"variable types","text":"<pre><code>bool\nInt, UInt: size inferred by platform\nFloat, Double\nCharacter, String\n</code></pre>"},{"location":"INFO449/Basics/#opereators","title":"opereators","text":"<pre><code>+ - * / (but not %)\n+= -= *= /= (but not %= ++ or --)\n</code></pre>"},{"location":"INFO449/Basics/#variable-declaration","title":"variable declaration","text":"<p>constants: let variables: var</p> <p></p>"},{"location":"INFO449/Basics/#control-flow","title":"control flow","text":""},{"location":"INFO449/Basics/#if","title":"if","text":"<pre><code>var temperatureInFahrenheit = 30\nif temperatureInFahrenheit &lt;= 32 {\n  print(\"It's very cold. Consider wearing a scarf.\")\n}\nelse if temperatureInFahrenheit &gt; 80 {\n  print(\"Holy crud! It's hot!\")\n}\nelse {\n  print(\"Quit yer whinin'.\")\n}\n</code></pre>"},{"location":"INFO449/Basics/#switch","title":"switch","text":"<pre><code>let temp = 30\nswitch temp {\n  case 0:\n    print(\"Brr! Freezing!\")\n  case 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n       11, 12, 13, 14, 15, 16, 17, 18:\n    print(\"Still damn cold!\")\n  default:\n    print(\"Meh\")\n}\n</code></pre>"},{"location":"INFO449/Basics/#while-repeat-while","title":"while &amp; repeat while","text":"<pre><code>var index : Int = 0\nwhile index &lt; 5 {\n  print(\"This is the \\(index)th time I've said this\")\n  index += 1\n}\n\nvar anotherIndex : Int = 0\nrepeat {\n  print(\"This is the \\(index)th time I've said this\")\n  anotherIndex += 1\n} while anotherIndex &lt; 5\n</code></pre>"},{"location":"INFO449/Basics/#composite-types","title":"composite types","text":""},{"location":"INFO449/Basics/#arrays","title":"arrays","text":"<pre><code>var shoppingList : [String] =\n  [\"catfish\", \"water\", \"tulips\", \"blue paint\"]\nshoppingList[1] = \"bottle of water\"\nprint(\"I bought a \\(shoppingList[1])\")\nprint(\"She bought \\(shoppingList)\")\n\n// Use for-in over an array\nlet names = [\"Alice\", \"Bob\", \"Mallory\", \"Eve\", \"Trent\"]\nfor name in names {\n  print(\"Hello, \\(name)!\")\n}\n</code></pre>"},{"location":"INFO449/Basics/#dictionaries","title":"dictionaries","text":"<pre><code>var occupations = [\n    \"Malcolm\": \"Captain\",\n    \"Kaylee\": \"Mechanic\",\n]\noccupations[\"Jayne\"] = \"Public Relations\"\nlet malJob = occupations[\"Malcolm\"]\nprint(\"Mal is the \\(malJob)\")\nprint(\"People work as \\(occupations)\")\n\nvar explore = [ 4.5 : \"StringValue\" ]\nprint(\"Can we key by doubles? \\(explore[4.5])\")\n\n// Use for-in over dictionaries\nfor (key, value) in occupations {\n  print(\"\\(key) is the \\(value)\")\n}\n</code></pre>"},{"location":"INFO449/Basics/#enums","title":"enums","text":"<pre><code>enum CompassPoint {\n    case North\n    case South\n    case East\n    case West\n}\nenum Planet {\n    case Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune\n}\n\nvar direction = CompassPoint.North\nswitch direction {\n    case .North: print(\"Brrr cold\")\n    case .South: print(\"Watch out for penguins\")\n    case .West : print(\"Where rises the Sun\")\n    case .East : print(\"Where sets the Sun\")\n}\n</code></pre>"},{"location":"INFO449/Basics/#tuples","title":"tuples","text":"<p>unnamed grouping of values</p> <pre><code>var city = (\"Seattle\", \"Washington\", 5000000)\nvar person = (\"Teresa\", \"Nguyen\", 39)\nvar ssi = city\nssi = person\n    // Structurally typed!\nprint(ssi)\nprint(ssi.0)\n</code></pre> <p></p>"},{"location":"INFO449/Basics/#functions","title":"functions","text":"<pre><code>func sayHello(personName : String) -&gt; String {\n    return \"Hello, \\(personName)\"\n}\nprint(sayHello(personName: \"Fred\"))\n</code></pre>"},{"location":"INFO449/Basics/#nested-functions","title":"nested functions","text":"<pre><code>func chooseStepFunction(backwards: Bool) -&gt; (Int) -&gt; Int {\n    func stepForward(input: Int) -&gt; Int { return input + 1 }\n    func stepBackward(input: Int) -&gt; Int { return input - 1 }\n    return backwards ? stepBackward : stepForward\n}\nvar currentValue = -2\nlet moveNearerToZero = chooseStepFunction(backwards: currentValue &gt; 0)\nwhile currentValue != 0 {\n    print(\"\\(currentValue)... \")\n    currentValue = moveNearerToZero(currentValue)\n}\nprint(\"zero!\")\n// -2...\n// -1...\n// zero!\n</code></pre>"},{"location":"INFO449/Index/","title":"Index","text":"\u2190 Back"},{"location":"INFO449/Index/#_1","title":"Index","text":""},{"location":"INFO449/Index/#category-amelias-ios-dev-notes","title":"Category: Amelia's iOS dev notes","text":"Basics Macros Object-oriented Swift Protocols Dynamic Swift Key-Value Coding Selectors Unit Testing"},{"location":"INFO449/dynamicswift/","title":"Dynamicswift","text":"<p>Last modified: May 4, 2025</p> \u2190 Back"},{"location":"INFO449/dynamicswift/#dynamic-swift","title":"Dynamic Swift","text":""},{"location":"INFO449/dynamicswift/#delegation","title":"Delegation","text":"<p>pattern used a lot within iOS enables a class to hand off (delegate) some of its responsibilities define a protocol to define the expected functionality hold one (or more) instances of the delegate in the class call to the delegate as the situation warrants/requires  </p> <pre><code>class Dice {\n    let sides : Int\n    let generator : RandomNumberGenerator\n    init(sides: Int, generator: RandomNumberGenerator) {\n      self.sides = sides\n      self.generator = generator\n    }\n    func roll() -&gt; Int {\n      return Int(generator.random() * Double(sides)) + 1\n    }\n}\nprotocol DiceGame {\n    var dice : Dice { get }\n    func play()\n}\nprotocol DiceGameDelegate {\n    func gameDidStart(game: DiceGame)\n    func game(_ game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int)\n    func gameDidEnd(game: DiceGame)\n}\n</code></pre>"},{"location":"INFO449/keyvaluecoding/","title":"Keyvaluecoding","text":"<p>Last modified: May 7, 2025</p> \u2190 Back"},{"location":"INFO449/keyvaluecoding/#key-value-coding","title":"Key-Value Coding","text":""},{"location":"INFO449/keyvaluecoding/#definitions","title":"Definitions","text":"<p>a \"key\" is a string that identifies a specific property \"key path\" is dot-separated keys used to specify a sequence of object properties to traverse keys or key paths can be runtime strings or compile-time constants a \"value\" is the value stored in the property  </p> <pre><code>class Person : NSObject {\n  @objc dynamic var firstName = \"\"\n  @objc dynamic var lastName = \"\"\n  @objc dynamic var age = 0\n}\nlet p = Person()\np.firstName = \"Fred\"\n</code></pre> <p>We can access the property by \"key\"</p> <pre><code>let pkeyPath = #keyPath(Person.firstName)\nif let value = p.value(forKey: pkeyPath) {\n  print(value)  // \"Fred\"\n}\nif let value = p.value(forKey: \"firstName\") {\n  print(value)  // \"Fred\"\n}\n</code></pre>"},{"location":"INFO449/macros/","title":"Macros","text":"<p>Last modified: April 30, 2025</p> \u2190 Back"},{"location":"INFO449/macros/#macros","title":"Macros","text":"<p>macros: the ability to write a source-level construct</p> <p></p>"},{"location":"INFO449/macros/#two-kinds-of-macros","title":"Two kinds of macros","text":"<p>syntactic\u00a0macros (C, C++ preprocessor) \u00a0\u00a0\u00a0\u00a0simple text drop-in replacement \u00a0\u00a0\u00a0\u00a0little to no compiler support \u00a0\u00a0\u00a0\u00a0potentially itself a source of bugs  </p> <p>semantic\u00a0macros (Lisp, Scheme, etc) \u00a0\u00a0\u00a0\u00a0fully checked and understood by the compiler \u00a0\u00a0\u00a0\u00a0verified correct \u00a0\u00a0\u00a0\u00a0this is Swift's implementation  </p> <p></p>"},{"location":"INFO449/macros/#swift-macro-types","title":"Swift macro types","text":"<p>freestanding\u00a0macros <code>#</code>-prefixed \u00a0\u00a0\u00a0\u00a0appear anywhere in code \u00a0\u00a0\u00a0\u00a0almost like source-level function calls  </p> <p>attached\u00a0macros <code>@</code>-prefixed \u00a0\u00a0\u00a0\u00a0modify a declaration they're \"attached\" to \u00a0\u00a0\u00a0\u00a0resemble other languages' \"custom attributes\" or \"annotations\"  </p> <p>Freestanding macros: \"#function\" and \"#warning\"</p> <pre><code>func myFunction() {\n    print(\"Currently running \\(#function)\")\n    #warning(\"Something's wrong\")\n}\n</code></pre> <p><code>#function</code> returns the name of the currently-scoped function <code>#warning</code> issues a warning during compilation  </p> <p>An attached macro: \"OptionSet\"</p> <pre><code>@OptionSet&lt;Int&gt;\nstruct SundaeToppings {\n    private enum Options: Int {\n        case nuts\n        case cherry\n        case fudge\n    }\n}\n</code></pre> <p>This macro sets \"nuts\", \"cherry\", and \"fudge\" to be \"bit flags\" values (1, 2, 4, ...)</p>"},{"location":"INFO449/ooswift/","title":"Ooswift","text":"<p>Last modified: May 4, 2025</p> \u2190 Back"},{"location":"INFO449/ooswift/#object-orientated-swift","title":"Object-orientated Swift","text":"<p>new instance</p> <pre><code>var aPoint = Point(x:2, y:3)\nprint(\"aPoint = \\(aPoint.stringified)\")\nvar anotherPoint = aPoint\naPoint.x = 12\nprint(\"anotherPoint = \\(anotherPoint), aPoint = \\(aPoint)\")\n</code></pre> <pre><code>class Person {\n  let firstName : String\n  let lastName : String\n  var spouse : Person?\n\n  init(first: String, last: String) {\n      firstName = first\n      lastName = last\n  }\n  deinit {\n    print(\"\\(firstName) is being deinitialized\")\n  }\n}\n\nvar b = Person(first: \"Brad\", last: \"Pitt\")\nvar a = Person(first: \"Angela\", last: \"Jolie\")\nb.spouse = angelina\na.spouse = brad\n</code></pre> <p></p> <p>defining and calling methods on structs</p> <pre><code> // ... still in struct Point ...\n  func stringRep() -&gt; String {\n    return \"(\\(self.x),\\(self.y))\"\n  }\n  static func compare(left: Point, right: Point) -&gt; Bool {\n    return (left.x == right.x) &amp;&amp; (left.y == right.y)\n  }\nvar o = Point.ORIGIN\nprint(o.stringRep())\nif Point.compare(left: o, right: Point.ORIGIN) {\n  print(\"Yep, they point to the same place\")\n}\no.move(x: 3, y:5)\nprint(o.stringRep())\n</code></pre> <pre><code>  init(x:Int32, y:Int32) {\n    self.x = x\n    self.y = y\n  }\n  init(x:Int32, y:Int32, name: String) {\n    self.x = x\n    self.y = y\n    self.name = name\n  }\n  init(y: Int32, x: Int32) {\n    self.x = x\n    self.y = y\n  }\n  init(pt: Point, offsetX: Int32 = 0, offsetY : Int32 = 0) {\n    self = pt\n    self.move(x: offsetX, y:offsetY)\n  }\n}\n</code></pre> <p></p>"},{"location":"INFO449/ooswift/#failable-initializers","title":"Failable initializers","text":"<p>Use \"init?\"     Return nil if constuction should fail     Makes the receiving reference an optional</p> <p>Use \"init!\"     Return unwrapped optional     Makes the receiving reference an </p> <p></p>"},{"location":"INFO449/ooswift/#error-handling","title":"Error Handling","text":"<p>An example class:</p> <pre><code>struct Item {\n    var price: Int\n    var count: Int\n}\nclass VendingMachine {\n    var inventory = [\n        \"Candy Bar\": Item(price: 12, count: 7),\n        \"Chips\": Item(price: 10, count: 4),\n        \"Pretzels\": Item(price: 7, count: 11)\n    ]\n    var coinsDeposited = 0\n    func dispenseSnack(snack: String) {\n        print(\"Dispensing \\(snack)\")\n    }\n    enum VendingMachineError: Error {\n        case InvalidSelection(desired: String)\n        case InsufficientFunds(coinsNeeded: Int)\n        case OutOfStock\n    }\n\n    // declare throws\n    func vend(itemNamed name: String) throws -&gt; String {\n        guard var item = inventory[name] else {\n            throw VendingMachineError.InvalidSelection(desired: name)\n        }\n\n        guard item.count &gt; 0 else {\n            throw VendingMachineError.OutOfStock\n        }\n\n        guard item.price &lt;= coinsDeposited else {\n            throw VendingMachineError.InsufficientFunds(coinsNeeded: item.price - coinsDeposited)\n        }\n\n        coinsDeposited -= item.price\n        item.count -= 1\n        inventory[name] = item\n        dispenseSnack(snack: name)\n        return name\n    }\n}\n</code></pre> <p></p> <p>catch exceptions</p> <pre><code>let vm = VendingMachine()\ndo {\n    vm.coinsDeposited = 12\n    try vm.vend(itemNamed: \"Diet Coke\")\n}\ncatch VendingMachineError.OutOfStock {\n    print(\"I don't have any of that\")\n}\ncatch VendingMachineError.InsufficientFunds(let coinsReq) {\n    print(\"You need more money: \\(coinsReq), to be precise\")\n}\ncatch VendingMachineError.InvalidSelection(let desired) \n    where desired == \"Diet Coke\" {\n    print(\"Sorry, we're a Pepsi place\")\n}\ncatch VendingMachineError.InvalidSelection(_) {\n    print(\"We don't carry that\")\n}\ncatch {\n    print(\"We really have no idea what went wrong\")\n}\n</code></pre>"},{"location":"INFO449/protocols/","title":"Protocols","text":"<p>Last modified: May 4, 2025</p> \u2190 Back"},{"location":"INFO449/protocols/#protocols","title":"Protocols","text":"<p>describes an \"intent to conform\" for disparate types \u00a0\u00a0\u00a0\u00a0similar to an interface in C#/Java use\u00a0<code>protocol</code>\u00a0keyword \u00a0\u00a0\u00a0\u00a0then declare properties and methods, no implementation \u00a0\u00a0\u00a0\u00a0static properties/methods are acceptable \u00a0\u00a0\u00a0\u00a0protocols can also require specific initializers classes, enums, structs can all adopt protocols \u00a0\u00a0\u00a0\u00a0protocol members that modify a struct must be declared with \"mutating\" extend the protocol using inheritance syntax</p> <pre><code>protocol FullyNamed {\n    var fullName : String { get }\n}\n\nprotocol RandomNumberGenerator {\n    func random() -&gt; Double\n}\n</code></pre> <pre><code>class Dice {\n    let sides : Int\n    let generator : RandomNumberGenerator\n    init(sides: Int, generator: RandomNumberGenerator) {\n      self.sides = sides\n      self.generator = generator\n    }\n    func roll() -&gt; Int {\n      return Int(generator.random() * Double(sides)) + 1\n    }\n}\nprotocol DiceGame {\n    var dice : Dice { get }\n    func play()\n}\nprotocol DiceGameDelegate {\n    func gameDidStart(game: DiceGame)\n    func game(_ game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int)\n    func gameDidEnd(game: DiceGame)\n}\n</code></pre>"},{"location":"INFO449/selectors/","title":"Selectors","text":"<p>Last modified: May 4, 2025</p> \u2190 Back"},{"location":"INFO449/selectors/#selectors","title":"Selectors","text":"<p>necessary for Objective-C compatibility/use \u00a0\u00a0\u00a0\u00a0but also useful in their own right, to add nominative binding capabilities references to methods by name \u00a0\u00a0\u00a0\u00a0with some amount of compiler checking selectors can be used to invoke methods \u00a0\u00a0\u00a0\u00a0permitting a degree of flexibility in setup/invocation used extensively in Cocoa and iOS to match-by-capabilities  </p> <p></p>"},{"location":"INFO449/selectors/#restrictions","title":"restrictions","text":"<p>class must inherit from NSObject \u00a0\u00a0\u00a0\u00a0necessary for the Obj-C plumbing \"underneath\" members must be annotated with @objc \u00a0\u00a0\u00a0\u00a0optional name describes the Obj-C name usable on methods and property methods</p> <p></p>"},{"location":"INFO449/selectors/#syntax","title":"Syntax","text":"<p><code>#selector</code>\u00a0obtains method at compile-time parameter is method with names separated by colons use\u00a0<code>getter:</code>\u00a0or\u00a0<code>setter:</code>\u00a0to obtain property getter/setter methods  </p> <pre><code>class SomeClass: NSObject {\n  @objc let property: String\n\n  @objc(doSomethingWithInt:)\n  func doSomething(_ x: Int) { }\n\n  init(property: String) { self.property = property }\n}\nlet selectorForMethod = #selector(SomeClass.doSomething(_:))\nlet selectorForPropertyGetter = #selector(getter: SomeClass.property)\n</code></pre>"},{"location":"INFO449/unittesting/","title":"Unittesting","text":"<p>Last modified: May 4, 2025</p> \u2190 Back"},{"location":"INFO449/unittesting/#unit-testing","title":"Unit Testing","text":"<p>XCTestCase: base class for unit test suite <code>setUp()</code>: run before each individual test <code>tearDown()</code>: run after each individual test \u00a0\u00a0\u00a0\u00a0write \"test\" methods \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0accept no parameters \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return no value \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prefixed with \"test\" in the name \u00a0\u00a0\u00a0\u00a0write \"performance test\" methods \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0use \"self.measure { ... }\" to mesaure time to execute  </p> <p>XCTAssert...: assertion functions \u00a0\u00a0\u00a0\u00a0XCTAssert: expression yields true \u00a0\u00a0\u00a0\u00a0XCTAssertTrue: boolean condition is true \u00a0\u00a0\u00a0\u00a0XCTAssertFalse: boolean condition is false \u00a0\u00a0\u00a0\u00a0XCTAssertNil: expression yields Nil  \u00a0\u00a0\u00a0\u00a0XCTAssertEqual: two expressions are equal \u00a0\u00a0\u00a0\u00a0XCTAssertNotEqual: two expressions are inequal \u00a0\u00a0\u00a0\u00a0... and a few others \u00a0\u00a0\u00a0\u00a0all overloaded to take a trailing \"message\" argument \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this message is what's displayed when the test fails</p>"},{"location":"SQL/1nf/","title":"1nf","text":"<p>Last modified: April 14, 2025</p> \u2190 Back"},{"location":"SQL/1nf/#first-normal-form","title":"First Normal Form","text":"<p>All relations must be flat: we say that the relation is in first normal form </p> <ul> <li> <p>Every cell holds a single value  </p> </li> <li> <p>Table is two-dimensional \u2013 just rows and columns  </p> </li> <li> <p>No nested structures (arrays, objects, sub-tables)</p> </li> </ul>"},{"location":"SQL/1nf/#not-in-1nf","title":"\u274c Not in 1NF:","text":"StudentID Name Courses 1 Alice Math, Physics 2 Bob English, History"},{"location":"SQL/1nf/#1nf-flat-table","title":"\u2705 1NF (Flat Table):","text":"StudentID Name Course 1 Alice Math 1 Alice Physics 2 Bob English 2 Bob History"},{"location":"SQL/Basics/","title":"Basics","text":"<p>Last modified: April 21, 2025</p> \u2190 Back"},{"location":"SQL/Basics/#basics","title":"Basics","text":"<p><code>INT</code> / <code>INTEGER</code> -2,147,483,648 to 2,147,483,647</p> <p><code>SMALLINT</code> 32,768 to 32,767</p> <p><code>BIGINT</code> -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 </p> <p><code>DECIMAL(p,s)</code> exact numeric, precision p, scale s</p> <p><code>FLOAT(p)</code> approximate numeric, precision p (precision in binary digits)</p> <p><code>DATE</code> (YYYY-MM-DD)</p> <p><code>TIME</code> (HH:MM:SS)</p> <p><code>CHAR(n)</code> fixed-length string</p> <p><code>NCHAR(n)</code> fixed-length Unicode string</p> <p><code>VARCHAR(n)</code> variable-length string</p> <p><code>NVARCHAR(n)</code> variable-length Unicode string</p> <p><code>BIT(BOOLEAN)</code> TRUE/FALSE/NULL</p> <pre><code>create table class (\n    name nvarchar(50),\n    grade FLOAT(24)\n)\n</code></pre> <p><code>insert into class values ('Bill', 3.6)</code></p> <p><code>Product(pname, price, category, manufacturer)</code></p>"},{"location":"SQL/Basics/#order-by","title":"ORDER BY","text":"<p>(multiple attributes \u2705)</p> <pre><code>SELECT pname, category  \nFROM Product  \nWHERE price &gt; 100.0  \nORDER BY category, pname\n</code></pre> <p>sort alphabetically by category, then sort alphabetically by pname</p> <pre><code>SELECT pname, category  \nFROM Product  \nWHERE price &gt; 100.0  \nORDER BY category DESC, pname ASC\n</code></pre> <p>Sort alphabetically by category Z -&gt; A, then sort alphabetically by pname A -&gt; Z</p>"},{"location":"SQL/Index/","title":"Index","text":"\u2190 Back"},{"location":"SQL/Index/#_1","title":"Index","text":""},{"location":"SQL/Index/#category-amelias-sql-ta-notes","title":"Category: Amelia's SQL TA notes","text":"Intro JOINs Keys First Normal Form Physical Data Dependence NULL Values CREATE TABLE INSERT, UPDATE, DELETE HAVING GROUP BY Simple Aggregation WITH Witnesses SELF JOIN Practice Conceptual Database Design Entity Relationship Diagram Relationship Weak Entity Sets From ER Diagram to Relational Schema Check Constraint FK Constraints Nested Queries Window Functions Row Number, Rank, Dense Rank Functional dependencies Normalization BCNF Decomposition Views &amp; Temp Tables"},{"location":"SQL/JOINs/","title":"JOINs","text":"<p>Last modified: April 17, 2025</p> \u2190 Back"},{"location":"SQL/JOINs/#notes-on-join","title":"Notes on JOIN","text":"<p>There are multiple ways to join tables, with the two below being among the most common:</p> <pre><code>SELECT DISTINCT cname  \nFROM Product, Company  \nWHERE manufacturer = cname\n</code></pre> <pre><code>SELECT DISTINCT cname  \nFROM Product\nJOIN Company\nON manufacturer = cname\n</code></pre> <p></p>"},{"location":"SQL/JOINs/#a-simple-join-example","title":"A simple JOIN example","text":"<p><code>Product</code> </p> pname category manufacturer Gizmo gadget GizmoWorks Camera Photo Hitachi OneClick Photo Hitachi <p><code>Company</code></p> cname country GizmoWorks USA Canon Japan Hitachi Japan <pre><code>SELECT DISTINCT cname  \nFROM Product p, Company c\nWHERE p.manufacturer = c.cname;\n</code></pre> cname GizmoWorks Hitachi <p></p>"},{"location":"SQL/JOINs/#inner-join","title":"(Inner) JOIN","text":"<p><code>FROM Product, Company</code> \"From all possible combinations of product of company\"</p> <p><code>WHERE</code> \"... choose only those results where the manufacturer of the product is the same as the company name\"</p> <p><code>SELECT DISTINCT cname</code> \"... then display only the unique company names.\"</p> <p></p>"},{"location":"SQL/JOINs/#outer-join","title":"Outer JOIN","text":"<p><code>Employee</code></p> id name 1 Joe 2 Jack 3 Jill <p><code>Sales</code></p> employeeID productID 1 344 1 355 2 544 <pre><code>-- Retrieve employees and their sales\n\nSELECT *\nFROM Employee E\nLEFT OUTER JOIN Sales S\nON E.id = S.employeeID;\n</code></pre> id name employeeID productID 1 Joe 1 344 1 Joe 1 355 2 Jack 2 544 3 Jill NULL NULL <p><code>FROM Employee E LEFT OUTER JOIN Sales S</code> Start with all rows from the <code>Employee</code> table, and include matching rows from <code>Sales</code> \u2014 if there is no match, still include the employee with NULLs for sales data.</p>"},{"location":"SQL/aggregation/","title":"Aggregation","text":"<p>Last modified: April 17, 2025</p> \u2190 Back"},{"location":"SQL/aggregation/#simple-aggregation","title":"Simple Aggregation","text":"<p>Total quantities for all sales over $1, by product.</p> <pre><code>SELECT sum(quantity)  \nFROM Purchase  \nWHERE price &gt; 1\n</code></pre> <p>Five basic aggregate operations:</p> <pre><code>SELECT count(*) FROM Purchase  \nSELECT sum(quantity) FROM Purchase  \nSELECT avg(price) FROM Purchase  \nSELECT max(quantity) FROM Purchase  \nSELECT min(quantity) FROM Purchase\n</code></pre> <p>Multiple simple aggregations in one statement   </p> <pre><code>SELECT count(*), sum(quantity), avg(price)  \nFROM Purchase\n</code></pre> <p>Compute the average price with sum and count  </p> <pre><code>SELECT sum(quantity) / count(*) AS average_quant  \nFROM Purchase\n</code></pre> <p>SQL as a calculator</p> <pre><code>SELECT 1+2+3+4+5 AS expr\nSELECT 25 / 100\nSELECT 25 / 100.0\nSELECT 25 / CAST(100 AS Float)\n</code></pre> <pre><code>SELECT sum(quantity) / count(*)  \nFROM Purchase  \n</code></pre> <p><code>int / int = int</code></p> <pre><code>SELECT (1.0*sum(quantity)) / count(*)  \nFROM Purchase  \n</code></pre> <p><code>(float * int) / int = float</code></p> <pre><code>SELECT CAST(sum(quantity) AS float) / count(*)  \nFROM Purchase  \n</code></pre> <p><code>(float * int) / int = float</code></p> <p></p>"},{"location":"SQL/aggregation/#aggregation-and-null","title":"Aggregation and NULL","text":"<p>NULL values are not used in aggregates</p> <pre><code>CREATE TABLE Purchase (\n    id INT,\n    item_name VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10, 2),\n    purchase_month VARCHAR(20)\n);\n\nINSERT INTO Purchase VALUES (12, 'gadget', NULL, NULL, 'april');\nINSERT INTO Purchase VALUES (12, 'gadget', 5, NULL, 'april');\n</code></pre> id item_name quantity price purchase_month 12 gadget NULL NULL april 12 gadget 5 NULL april <pre><code>SELECT count(quantity) FROM Purchase\n\nSELECT count(*)  \nFROM Purchase  \nWHERE quantity IS NOT null;\n</code></pre>"},{"location":"SQL/bcnfdecomp/","title":"Bcnfdecomp","text":"<p>Last modified: May 29, 2025</p> \u2190 Back"},{"location":"SQL/bcnfdecomp/#bcnf-decomposition","title":"BCNF Decomposition","text":"<p>(recall BCNF: For every functional dependency <code>X \u2192 Y</code>, <code>X</code> must be a superkey)</p>"},{"location":"SQL/bcnfdecomp/#step-1","title":"Step 1","text":"<p>Check which functional dependencies of R are not in BCNF, if they're all in BCNF we do not need to decompose R.</p> <p>AB -&gt; CD</p> <p>D -&gt; E</p> <p>A -&gt; C</p> <p>B -&gt; D</p> <p></p> <p>{AB}<sup>+</sup> = {A,B,C,D,E} -&gt; CK: AB</p> <p>AB -&gt; CD</p> <p>D -&gt; E (violates BCNF)</p> <p>A -&gt; C</p> <p>B -&gt; D</p> <p></p>"},{"location":"SQL/bcnfdecomp/#step-2","title":"Step 2","text":"<p>Create two sub-relations:</p> <ol> <li> <p>{X}<sup>+</sup></p> </li> <li> <p>R - {X}<sup>+</sup> + X</p> </li> </ol> <p>AB -&gt; CD</p> <p>D -&gt; E -&gt;  {D}<sup>+</sup> = {D, E} -&gt; R<sub>1</sub>(DE), R<sub>2</sub>(ABCD)</p> <p>A -&gt; C</p> <p>B -&gt; D</p> <p></p>"},{"location":"SQL/bcnfdecomp/#step-3","title":"Step 3","text":"<p>For each sub-relation we check if all of its functional dependencies are now in BCNF</p> <ul> <li> <p>if they are we keep the sub-relation as it is</p> </li> <li> <p>if not, do Step 2 again for the sub-relation's dependency that does not satisfy BCNF</p> </li> </ul> <p>R<sub>1</sub>(DE)</p> <p>CK = D</p> <p>D -&gt; E (BCNF)</p> <p></p> <p>R<sub>2</sub>(ABCD)</p> <p>CK = AB</p> <p>AB -&gt; CD (BCNF)</p> <p>A -&gt; C (not in BCNF)</p> <p>B -&gt; D</p> <p></p> <p>R<sub>3</sub>(AC)</p> <p>CK = A</p> <p>A -&gt; C (BCNF)</p> <p></p> <p>R<sub>4</sub>(ABD)</p> <p>CK = AB</p> <p>AB -&gt; D (BCNF)</p> <p>B -&gt; D (not in BCNF)</p> <p></p> <p>R<sub>5</sub>(BD)</p> <p>CK = B</p> <p>B -&gt; D (BCNF)</p> <p></p> <p>R<sub>6</sub>(AB)</p> <p>CK = AB</p> <p>AB -&gt; AB (BCNF)</p> <p></p>"},{"location":"SQL/bcnfdecomp/#step-4","title":"Step 4","text":"<p>Final decomposition is composed of sub-relations that all their functional dependencies hold BCNF</p> <p>R<sub>1</sub>(DE)</p> <p>D -&gt; E</p> <p></p> <p>R<sub>3</sub>(AC)</p> <p>A -&gt; C</p> <p></p> <p>R<sub>5</sub>(BD)</p> <p>B -&gt; D</p> <p></p> <p>R<sub>6</sub>(AB)</p> <p>AB -&gt; AB</p>"},{"location":"SQL/check/","title":"Check","text":"<p>Last modified: April 30, 2025</p> \u2190 Back"},{"location":"SQL/check/#check-constraint","title":"CHECK Constraint","text":"<pre><code>CREATE TABLE User (  \n    uid int primary key,  \n    firstName text,  \n    lastName text NOT NULL,  \n    age int CHECK (age &gt; 12 and age &lt; 120),  \n    email text,  \n    phone text,  \n    CHECK (email is not NULL or phone is not NULL)  \n)\n</code></pre> <p>Similar to FK, but not supported</p> <pre><code>CREATE TABLE Purchase (\n    prodName CHAR(30)\n        CHECK (prodName IN (\n            SELECT Product.name\n            FROM Product\n        )),\n    date DATETIME NOT NULL\n);\n</code></pre>"},{"location":"SQL/conceptualdbdesign/","title":"Conceptualdbdesign","text":"<p>Last modified: April 23, 2025</p> \u2190 Back"},{"location":"SQL/conceptualdbdesign/#conceptual-database-design","title":"Conceptual Database Design","text":""},{"location":"SQL/conceptualdbdesign/#database-design-process","title":"Database Design Process","text":""},{"location":"SQL/conceptualdbdesign/#conceptual-database-design_1","title":"Conceptual Database Design","text":"<ul> <li>Organizing information into a data model.</li> <li>Identifies entities, relationships, constraints, and operations.</li> <li>Aims to capture requirements independently of specific systems/tools.</li> </ul>"},{"location":"SQL/conceptualdbdesign/#data-model-components","title":"Data Model Components","text":"<ul> <li>Structures (e.g., entities like Employee, Product)</li> <li>Constraints (e.g., each employee must have a supervisor)</li> <li>Operations (e.g., make a purchase)</li> </ul>"},{"location":"SQL/conceptualdbdesign/#design-levels","title":"Design Levels","text":"<ul> <li>Conceptual Schema (entities and relationships)</li> <li>Relational Schema (tables and constraints)</li> <li>Physical Schema (storage details)</li> </ul>"},{"location":"SQL/conceptualdbdesign/#conceptual-design-process","title":"Conceptual Design Process","text":""},{"location":"SQL/conceptualdbdesign/#entity-identification","title":"Entity Identification","text":"<ul> <li>Begin by identifying entities\u2014the real-world things that data is about.</li> <li>Example: For a race-tracking app, possible entities include:<ul> <li>Racers, Races, Bicycles/Equipment, Sponsors, Race Results</li> </ul> </li> </ul>"},{"location":"SQL/conceptualdbdesign/#relationships-among-entities","title":"Relationships Among Entities","text":"<ul> <li>Recognize how entities are related:</li> <li>Parent-Child</li> <li>Has-A, Is-A</li> <li>Part-Of, Depends-On</li> <li>Concepts like Inheritance, Aggregation, Association etc.</li> </ul>"},{"location":"SQL/conceptualdbdesign/#entity-relationship-er-diagrams","title":"Entity-Relationship (E/R) Diagrams","text":"<ul> <li>Entity Set = a class/type of object</li> <li>Entity = an instance</li> <li>Includes: Attributes, Relationships, Keys for each entity set</li> </ul>"},{"location":"SQL/conceptualdbdesign/#relations-and-multiplicity","title":"Relations and Multiplicity","text":"<ul> <li>A relation is a mathematical subset of the Cartesian product of two sets.</li> <li>Relationships may be:<ul> <li>One-to-one</li> <li>One-to-many</li> <li>Many-to-many</li> </ul> </li> </ul>"},{"location":"SQL/conceptualdbdesign/#attributes-on-relationships","title":"Attributes on Relationships","text":"<ul> <li>Relationships can have their own attributes   (e.g., date of purchase in a \"Buys\" relationship).</li> </ul>"},{"location":"SQL/create/","title":"Create","text":"<p>Last modified: April 24, 2025</p> \u2190 Back"},{"location":"SQL/create/#create-table","title":"CREATE TABLE","text":"<p>Company Table</p> cname country no_employees for_profit Canon Japan 50000 Y Hitachi Japan 30000 Y <pre><code>CREATE TABLE Company (\n  cname VARCHAR(30),\n  country VARCHAR(20),\n  no_employees INT,\n  for_profit BOOLEAN\n)\n</code></pre> <p>or:</p> <pre><code>CREATE TABLE Company (\n  cname VARCHAR(30) PRIMARY KEY,\n  country VARCHAR(20),\n  no_employees INT,\n  for_profit BOOLEAN\n)\n</code></pre> <p></p> <p></p> <p>Product(name, category)</p> <pre><code>CREATE TABLE Product (\n  name CHAR(30) PRIMARY KEY,\n  category VARCHAR(20)\n)\n</code></pre> <p>or:</p> <pre><code>CREATE TABLE Product (  \n    name CHAR(30),  \n    category VARCHAR(20),  \n    PRIMARY KEY (name)\n)\n</code></pre> <p></p>"},{"location":"SQL/create/#keys-with-multiple-attributes","title":"Keys with multiple attributes","text":"<p>Product(name, category, price)</p> <pre><code>CREATE TABLE Product (  \n    name CHAR(30),  \n    category VARCHAR(20),  \n    price INT,  \n    PRIMARY KEY (name, category)  \n)\n</code></pre> Name Category Price Gizmo Gadget 10 Camera Photo 20 Gizmo Photo 30 Gizmo Gadget 40 <p></p>"},{"location":"SQL/create/#other-keys","title":"Other keys","text":"<pre><code>CREATE TABLE Product (  \n    productID CHAR(10),  \n    name CHAR(30),  \n    category VARCHAR(20),  \n    price INT,  \n    PRIMARY KEY (productID),  \n    UNIQUE (name, category))\n</code></pre> <p>There is at most one PRIMARY KEY; there can be many UNIQUE</p> Feature PRIMARY KEY UNIQUE Ensures uniqueness \u2705 Yes \u2705 Yes Allows NULL values \u274c No (NULL not allowed) \u2705 Yes (unless you say otherwise) Number per table \u2757Only one allowed \u2705 You can have multiple UNIQUE constraints Main identity \u2705 Used to identify each row \u274c Just used to enforce rules, not row identity <p></p>"},{"location":"SQL/create/#foreign-key-constraints","title":"Foreign key constraints","text":"<pre><code>CREATE TABLE Purchase (  \n    prodName CHAR(30) REFERENCES Product(name),  \n    date DATETIME)\n</code></pre> <p>prodName is a foreign key to Product(name) name must be a key in Product</p> <p>Example:</p> <pre><code>CREATE TABLE Purchase (  \n    prodName CHAR(30),  \n    category VARCHAR(20),  \n    date DATETIME,  \n    FOREIGN KEY (prodName, category)  \n    REFERENCES Product(name, category))\n</code></pre> <ul> <li>(name, category) must be a KEY in Product</li> </ul>"},{"location":"SQL/erd/","title":"Erd","text":"<p>Last modified: April 23, 2025</p> \u2190 Back"},{"location":"SQL/erd/#entity-relation-diagram","title":"Entity Relation Diagram","text":"<ul> <li>An entity corresponds to an instance of an object<ul> <li>corresponds to a row in an RDBMS table</li> </ul> </li> <li>An attribute corresponds to a field  </li> <li>An entity set is a collection of entities of the same type</li> <li>Underline indicates the attribute is part of the Primary Key</li> </ul>"},{"location":"SQL/erdtoschema/","title":"Erdtoschema","text":"<p>Last modified: April 30, 2025</p> \u2190 Back"},{"location":"SQL/erdtoschema/#from-er-diagram-to-relational-schema","title":"From ER Diagram to Relational Schema","text":""},{"location":"SQL/erdtoschema/#database-design-process","title":"Database design process","text":"<p>Conceptual Model -&gt; Relational Model \u00a0\u00a0\u00a0\u00a0+ schema \u00a0\u00a0\u00a0\u00a0+ constraints</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"SQL/fd/","title":"Fd","text":"<p>Last modified: May 24, 2025</p> \u2190 Back"},{"location":"SQL/fd/#functional-dependencies","title":"Functional dependencies","text":"<p>A functional dependency is a constraint that describes a relationship between attributes (columns) in a relation (table).</p> <p>If two tuples agree on attribute X, they must also agree on the attributes Y    <code>X -&gt; Y</code></p> <p>X functionally determines Y.</p> <p></p> <p>If you have a table <code>Students</code> with attributes: <code>StudentID, Name, Major)</code></p> <p>and each student has a unique <code>StudentID</code>, then: <code>StudentID -&gt; Name, Major</code></p> <p>Means knowing the StudentID uniquely determines the Name and Major.</p> <p>If we can be sure that every instance of R (relational schema) will be one in which a given FD is true, then we say that R satisfies the FD</p> <p></p>"},{"location":"SQL/fd/#additional-rules","title":"Additional Rules","text":"<p>If X \u2192 Y and X \u2192 Z, then X \u2192 YZ</p> <p>If X \u2192 YZ, then X \u2192 Y and X \u2192 Z</p> <p>If X \u2192 Y and WY \u2192 Z, then WX \u2192 Z</p>"},{"location":"SQL/fkconstraints/","title":"Fkconstraints","text":"<p>Last modified: April 30, 2025</p> \u2190 Back"},{"location":"SQL/fkconstraints/#fk-constraints","title":"FK Constraints","text":"<p>What should the DB engine do if execution SQL statement collides with a FOREIGN KEY constraint? \u00a0\u00a0\u00a0\u00a0 For example:  <code>DELETE FROM Company WHERE name = \u2018lmao\u2019;</code> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 and the Products Table contains Foreign Key entries for  <code>cname = \u2018lmao\u2019</code></p> <p></p> <p>ON DELETE / ON UPDATE Options  </p> <ul> <li> <p>NO ACTION     Default behavior; Raises an error and the Delete/Update is rolled back</p> </li> <li> <p>CASCADE     Automatically fixes the referencing Table; on UPDATE, corresponding rows are changed</p> </li> <li> <p>SET NULL     Automatically fixes the referencing Table; FOREIGN KEY column must be NULLABLE</p> </li> <li> <p>SET DEFAULT     Automatically fixes the referencing Table; FOREIGN KEY column must have DEFAULT value defined</p> </li> </ul> <pre><code>CREATE TABLE Company (\n    name VARCHAR(100) PRIMARY KEY);\n    CREATE TABLE Product (\n    name VARCHAR(100) PRIMARY KEY,\n    cname VARCHAR(100) REFERENCES Company (name)\n    ON UPDATE CASCADE\n    ON DELETE SET NULL);\n</code></pre> <p></p>"},{"location":"SQL/fkconstraints/#weak-entity-set-foreign-key-cascade-delete","title":"Weak Entity Set -&gt; Foreign Key + Cascade Delete","text":"<pre><code>CREATE TABLE Team (  \n    univname CHAR(30) REFERENCES University(name)  \n    ON DELETE CASCADE ON UPDATE CASCADE,  \n    number int,\n    sport CHAR(30))\n</code></pre>"},{"location":"SQL/groupby/","title":"Groupby","text":"<p>Last modified: April 17, 2025</p> \u2190 Back"},{"location":"SQL/groupby/#group-by","title":"GROUP BY","text":"<p>One answer for each product</p> <pre><code>SELECT product, count(*)  \nFROM Purchase  \nGROUP BY product\n</code></pre> <p>One answer for each month</p> <pre><code>SELECT month, count(*)  \nFROM Purchase  \nGROUP BY month\n</code></pre> <p>Using multiple aggregates:</p> <pre><code>SELECT product, sum(quantity) AS SumQuantity, max(price) AS MaxPrice  \nFROM Purchase\nGROUP BY product\n</code></pre> <p></p> <p>All attributes must be involved in GROUP BY or an aggregate </p> <p>\u2705</p> <pre><code>SELECT product, max(quantity)  \nFROM Purchase \nGROUP BY product\n</code></pre> <p>\u274c</p> <pre><code>SELECT product, quantity  \nFROM Purchase  \nGROUP BY product\n</code></pre> <p></p>"},{"location":"SQL/groupby/#group-by-distinct","title":"GROUP BY + DISTINCT","text":"<pre><code>SELECT month  \nFROM Purchase  \nGROUP BY month\n</code></pre> <p>=</p> <pre><code>SELECT DISTINCT month  \nFROM Purchase\n</code></pre> <p></p>"},{"location":"SQL/groupby/#group-by-where","title":"GROUP BY + WHERE","text":"Product Price Quantity Bagel 3 20 1.50 20 Banana 0.5 50 2 10 4 10 <pre><code>SELECT product, Sum(quantity) AS TotalSales  \nFROM Purchase  \nWHERE price &gt; 1  \nGROUP BY product\n</code></pre> Product TotalSales Bagel 40 Banana 20"},{"location":"SQL/groupby/#grouping-and-aggregation","title":"Grouping and Aggregation","text":"<ol> <li>Compute the FROM and WHERE clauses.  </li> <li>Group by the attributes in the GROUPBY  </li> <li>Compute the SELECT clause: grouped attributes and aggregates.  </li> </ol> <p>FWGS</p> <pre><code>SELECT product, sum(price * quantity) as rev  \nFROM Purchase  \nGROUP BY product  \nORDER BY rev DESC\n</code></pre> <p></p>"},{"location":"SQL/groupby/#group-by-join","title":"GROUP BY + JOIN","text":"<pre><code>SELECT x.manufacturer, y.month, COUNT(*)\nFROM Product x, Purchase y\nWHERE x.product_id = y.product_id\n    and y.price &gt; 100\nGROUP BY x.manufacturer, y.month\n</code></pre>"},{"location":"SQL/having/","title":"Having","text":"<p>Last modified: April 18, 2025</p> \u2190 Back"},{"location":"SQL/having/#having","title":"HAVING","text":"<p>Purchase(pid, product, price, quantity, month)  </p> <pre><code>SELECT product, sum(price*quantity)  \nFROM Purchase  \nWHERE price &gt; 1  \nGROUP BY product  \nHAVING sum(quantity) &gt; 30\n</code></pre> <p>HAVING clause contains conditions on aggregates Where clause before grouping, having clause after grouping</p> <p></p>"},{"location":"SQL/having/#where-vs-having","title":"WHERE vs HAVING","text":"<p>WHERE is applied to individual rows - The rows may or may not contribute to the aggregate - No aggregates allowed here - Occasionally, some groups become empty and are removed HAVING is applied to the entire group - Entire group is returned, or removed - May use aggregate functions on the group  </p> <pre><code>SELECT COUNT(*) AS total_users\nFROM users\nHAVING COUNT(*) &gt; 100;\n</code></pre> <p>Also works. GROUP BY not strictly required</p> <p></p> <p>Example</p> <p>Compute the total income per month Show only months with less than 10 items sold Order by quantity sold and display as \u201cTotalSold\u201d </p> <p>Purchase(pid, product, price, quantity, month) ``` SUM month, SUM(price * quantity), sum(quantity) as TotalSold FROM Purchase GROUP BY month HAVING sum(quantity) &lt; 10 ORDER BY sum(quantity)  </p>"},{"location":"SQL/insert-update-del/","title":"Insert update del","text":"<p>Last modified: April 17, 2025</p> \u2190 Back"},{"location":"SQL/insert-update-del/#insert-update-delete","title":"INSERT, UPDATE, DELETE","text":"<pre><code>INSERT Product(name, category)  \nVALUES (\u2018gizmo\u2019, \u2018toy'),  \n    (\u2018digicam\u2019, \u2018camera\u2019)  \n</code></pre> <p>You can specify which columns you\u2019re providing. You can insert multiple records with one  statement. Often much faster than a separate statement for each record.</p> <p></p> <pre><code>UPDATE Product\nSET category = \u2018toy\u2019\nWHERE name = \u2018digicam\u2019\n</code></pre> <p>You can make multiple changes with one statement ALL records that match this condition will be updated.</p> <p></p> <pre><code>DELETE FROM Product  \nWHERE category = \u2018toy\u2019\n</code></pre> <p>ALL records that match this condition will be updated.</p>"},{"location":"SQL/key/","title":"Key","text":"<p>Last modified: April 17, 2025</p> \u2190 Back"},{"location":"SQL/key/#everything-about-keys","title":"Everything about keys","text":"<p>key = one (or more) attributes that uniquely identify a record</p>"},{"location":"SQL/key/#primary-key","title":"Primary Key","text":"<p>The one key the db designer picks to be the main way of identifying rows</p> student_id first_name last_name major 1 Alice Smith Informatics 2 Bob Lee CS 3 Carol Johnson Informatics <pre><code>-- two ways for assigning PK\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    major VARCHAR(50)\n);\n\nCREATE TABLE students (\n    student_id INT,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    major VARCHAR(50),\n    PRIMARY KEY (student_id)\n);\n</code></pre> <p></p>"},{"location":"SQL/key/#multi-attribute-keys","title":"Multi-attribute keys","text":"fName lName Income Department Alice Smith 20000 Testing Alice Thompson 50000 Testing Bob Thompson 30000 SW Carol Smith 50000 Testing"},{"location":"SQL/key/#surrogate-keys","title":"Surrogate keys","text":"id fName lName Income Department 11111 Alice Smith 20000 Testing 22222 Alice Thompson 50000 Testing 33333 Bob Thompson 30000 SW 44444 Carol Smith 50000 Testing <pre><code>CREATE TABLE employees (\n    employee_id INT IDENTITY(1,1) PRIMARY KEY,\n    first_name VARCHAR(100),\n    last_name VARCHAR(100),\n    department VARCHAR(100)\n);\n\nINSERT INTO employees (first_name, last_name, department)\nVALUES ('Amelia', 'Smith', 'Informatics');\n\nSELECT * FROM employees;\n\n-- dont need to insert primary key\n</code></pre>"},{"location":"SQL/key/#super-key","title":"Super key","text":"<p>key might be an entire tuple all attributes together always form a key</p> Make Model Year Honda Pilot 2014 Honda CRV 2014 Toyota Camry 2012 Honda Pilot 2017 <p></p>"},{"location":"SQL/key/#multiple-keys","title":"Multiple keys","text":"<p>a relation can have more than 1 key the DB designer will designate one as the primary key</p> SSN fName lName Income Department 111-22-3333 Alice Smith 20000 Testing 222-33-4444 Alice Thompson 50000 Testing 333-44-5555 Bob Thompson 30000 SW 444-55-6666 Carol Smith 50000 Testing <p></p>"},{"location":"SQL/key/#foreign-key","title":"Foreign key","text":"title author isbn publisher printing The New Jim Crow Michelle Alexander 123-45-678 The New Press 1 Guns, Germs, and Steel Jared Diamond 444-55-666 Norton 2 isbn customer date 123-45-678 1234 9/2/2021 444-55-666 4456 9/5/2021 customer lname fname 1234 Shah S 4456 Lee J <ul> <li>The <code>isbn</code> in the Sales table refers to the <code>isbn</code> in the Books table. This tells us which book was sold.</li> <li>The <code>customer</code> in the Sales table refers to the <code>customer</code> in the Customers table. This tells us who bought the book.</li> </ul> <p>A foreign key is a field (or group of fields) in one table that refers to the primary key in another table.  </p> <ul> <li>It\u2019s how we create relationships between tables in a database.</li> </ul>"},{"location":"SQL/nestedqueries/","title":"Nestedqueries","text":"<p>Last modified: May 4, 2025</p> \u2190 Back"},{"location":"SQL/nestedqueries/#nested-queries","title":"Nested Queries","text":"<p>A subquery is a SQL query nested inside a larger query Such inner-outer queries are called nested queries  </p> <p>A subquery may occur in:  </p> <ul> <li>A SELECT clause  </li> <li>A FROM clause  </li> <li>A WHERE clause</li> </ul> <p>In a SELECT clause, must return a single value (1 row, 1 column) In a FROM clause, returns a relation (many rows, many relations), aliased using a tuple variable In a WHERE clause, may return a single value to be compared with another value In a WHERE clause, may return a relation to be used with WHERE EXISTS  </p> <p></p>"},{"location":"SQL/nestedqueries/#subqueries-in-select-single-value","title":"Subqueries in SELECT (single value)","text":"<p>For each product return the city where it is manufactured</p> <pre><code>SELECT X.pname, (SELECT Y.city  \n    FROM Company Y  \n    WHERE Y.cid = X.cid) as City  \nFROM Product X\n</code></pre> <p>\"Correlated subquery\": a subquery that depends on a value from the outer query \"Using this product's <code>cid</code>, find the <code>city</code> in the <code>Company</code> table.\"</p> <p>Same thing as:</p> <pre><code>SELECT X.pname, Y.city  \nFROM Product X, Company Y  \nWHERE X.cid = Y.cid\n</code></pre> <p>Compute the number of products made by each company</p> <pre><code>SELECT C.cid, C.cname, (SELECT count(*)\n    FROM Product P  \n    WHERE P.cid = C.cid)  \nFROM Company C\n</code></pre> <p>Same thing as:</p> <pre><code>SELECT C.cid, C.cname, count(pname)  \nFROM Company C LEFT JOIN Product P  \nON C.cid = P.cid  \nGROUP BY C.cid, C.cname\n</code></pre> <p>Without LEFT JOIN, companies with no products are excluded</p> <p></p>"},{"location":"SQL/nestedqueries/#subqueries-in-from","title":"Subqueries in FROM","text":"<p>Find all products whose prices is &gt; 20 and &lt; 500</p> <pre><code>SELECT X.pname  \nFROM (SELECT *  \n    FROM Product AS Y  \n    WHERE price &gt; 20) as X  \nWHERE X.price &lt; 500\n</code></pre> <p>Every SQL returns a relation, so you can use it in the FROM clause like any other relation</p> <p>Sometimes we need to compute an intermediate table only to use it later in a SELECT-FROM-WHERE  </p> <ul> <li>Option 1: use a subquery in the FROM clause</li> <li>Option 2: use the WITH clause  </li> </ul> <pre><code>WITH myTable AS (\n    SELECT *\n    FROM Product AS Y\n    WHERE price &gt; 20)\nSELECT X.pname\nFROM myTable as X\nWHERE X.price &lt; 500\n</code></pre> <p></p>"},{"location":"SQL/nestedqueries/#subqueries-in-where","title":"Subqueries in WHERE","text":"<p>Find all companies that make some products with price &lt; 200</p> <p>Using EXISTS:</p> <pre><code>SELECT C.cid, C.cname  \nFROM Company C  \nWHERE EXISTS (SELECT *  \n    FROM Product P  \n    WHERE C.cid = P.cid and P.price &lt; 200)\n</code></pre> <p>EXISTS returns TRUE if the subquery returns any row</p> <p>Using IN:</p> <pre><code>SELECT C.cid, C.cname  \nFROM Company C  \nWHERE C.cid IN (SELECT P.cid  \n    FROM Product P  \n    WHERE P.price &lt; 200)\n</code></pre> <p>Using ANY:</p> <pre><code>SELECT C.cid, C.cname  \nFROM Company C  \nWHERE 200 &gt; ANY (SELECT price  \n    FROM Product P  \n    WHERE P.cid = C.cid)\n</code></pre> <p>Not supported in some DBMS (avoid)</p> <p>Unnest it:</p> <pre><code>SELECT DISTINCT C.cid, C.cname  \nFROM Company C, Product P  \nWHERE C.cid = P.cid and P.price &lt; 200\n</code></pre> <p></p> <p>Find all companies s.t. all their products have price &lt; 200 = Find all companies that make only products with price &lt; 200</p> <ul> <li>Find the other companies that make some product \u2265 200</li> </ul> <pre><code>SELECT C.cid, C.cname\nFROM Company C\nWHERE C.cid NOT IN (\n    SELECT P.cid\n    FROM Product P\n    WHERE P.price &gt;= 200\n)\n</code></pre> <ul> <li>Find all companies s.t. all their products have price &lt; 200</li> </ul> <p>Another way using EXISTS</p> <pre><code>SELECT C.cid, C.cname\nFROM Company C\nWHERE NOT EXISTS (SELECT *\n    FROM Product P\n    WHERE P.cid = C.cid and P.price &gt;= 200)\n</code></pre> <p>Using ALL:</p> <pre><code>SELECT C.cid, C.cname  \nFROM Company C  \nWHERE 200 &gt;= ALL (SELECT price  \n    FROM Product P  \n    WHERE P.cid = C.cid)\n</code></pre> <p>Not supported in some DBMS (avoid)</p>"},{"location":"SQL/normalization/","title":"Normalization","text":"<p>Last modified: May 27, 2025</p> \u2190 Back"},{"location":"SQL/normalization/#normalization","title":"Normalization","text":"<p>Normalization is a process in database design used to:</p> <ul> <li> <p>Eliminate redundancy</p> </li> <li> <p>Prevent update anomalies</p> </li> <li> <p>Ensure data integrity</p> </li> </ul> <p>Normal forms are levels or stages of normalization.</p> <p></p>"},{"location":"SQL/normalization/#1nf-first-normal-form","title":"1NF (First Normal Form)","text":"<ul> <li>All values in each column must be atomic (i.e., indivisible).</li> <li>No repeating groups or arrays.</li> </ul> StudentID CourseID StudentName 1 C101 Alice 1 C102 Alice 2 C101 Bob <p><code>StudentName</code> depends only on StudentID, not the full key \u2192 partial dependency</p> <p></p>"},{"location":"SQL/normalization/#2nf-second-normal-form","title":"2NF (Second Normal Form)","text":"<ul> <li>Must be in 1NF</li> <li>No partial dependency: No non-key attribute should depend on part of a composite key</li> </ul> EmployeeID DeptID DeptName 1 10 Sales 2 20 HR 3 10 Sales <p><code>DeptID \u2192 DeptName</code> (transitive: <code>EmployeeID \u2192 DeptID \u2192 DeptName</code>)</p> <p></p>"},{"location":"SQL/normalization/#3nf-third-normal-form","title":"3NF (Third Normal Form)","text":"<ul> <li>Must be in 2NF</li> <li>No transitive dependency: Non-key attributes shouldn\u2019t depend on other non-key attributes<ul> <li>transitive dependency: A non-key attribute depends on another non-key attribute, which in turn depends on the key.</li> </ul> </li> </ul> Course Instructor Room Math101 Smith R1 CS102 Jones R2 Math101 Smith R1 <p>Instructor is not a key, but it's determining <code>Room</code> \u2192 violates BCNF</p> <p></p>"},{"location":"SQL/normalization/#bcnf-boyce-codd-normal-form","title":"BCNF (Boyce-Codd Normal Form)","text":"<ul> <li>Must be in 3NF</li> <li>For every functional dependency <code>X \u2192 Y</code>, <code>X</code> must be a superkey</li> </ul> Student Language Hobby Alice French Music Alice French Sports Alice Spanish Music Alice Spanish Sports"},{"location":"SQL/normalization/#relational-schema-design-or-logical-design","title":"Relational Schema Design  (or Logical Design)","text":"<p>\u2022 Start with some relational schema \u2022 Find out its functional dependencies (FDs) \u2022 Use FDs to normalize the relational schema  </p> <p>One person may have multiple phones, but lives in only one city Primary key is thus (SSN, PhoneNumber) What's wrong?  </p> Name SSN PhoneNumber City Fred 123-45-6789 206-555-1234 Seattle Fred 123-45-6789 206-555-6543 Seattle Joe 987-65-4321 908-555-2121 Westfield Joe 987-65-4321 908-555-1234 Westfield <p>The only key is: <code>{SSN, PhoneNumber}</code></p> <p>Hence <code>SSN -&gt; Name, City</code> is a \u201cbad\u201d dependency</p> <ul> <li> <p>Why? Partial dependency</p> <ul> <li>partial dependency: when a non-key attribute depends on part of a composite key, not the full key</li> </ul> </li> </ul> <p>In other words:</p> <p>SSN<sup>+</sup> = SSN, Name, City and is neither SSN nor All Attributes</p> <ul> <li> <p>Is not enough to uniquely identify tuples</p> </li> <li> <p>But it's also not trivial (more than just itself)</p> </li> </ul> <p><code>SSN\u207a</code> : the closure of the attribute <code>SSN</code>, meaning the set of attributes functionally determined by SSN.</p> <p><code>SSN\u207a = {SSN, Name, City}</code></p> <p></p>"},{"location":"SQL/normalization/#example-bcnf-decomposition","title":"Example BCNF Decomposition","text":"Name SSN City Fred 123-45-6789 Seattle Joe 987-65-4321 Westfield SSN PhoneNumber 123-45-6789 206-555-1234 123-45-6789 206-555-6543 987-65-4321 908-555-2121 987-65-4321 908-555-1234"},{"location":"SQL/null/","title":"Null","text":"<p>Last modified: May 7, 2025</p> \u2190 Back"},{"location":"SQL/null/#null-values","title":"NULL Values","text":"<p>Relational databases allow a special value NULL Interpretation depends on the application:  NULL could mean \u201cNot applicable\u201d or \u201cunknown\u201d or \u201chidden\u201d or \u201cnot collected\u201d or many other things</p> <p>NULL or True = True  </p> <ul> <li>This expression will always be true</li> </ul> <p>Is NULL equal to NULL?  </p> <ul> <li>no. bc NULL can be \u2728anything\u2728</li> </ul> <p>special syntax to test for NULL:  </p> <ul> <li>\u201cx IS NULL\u201d evaluates to True if x is NULL</li> </ul>"},{"location":"SQL/physical-dependence/","title":"Physical dependence","text":"<p>Last modified: April 14, 2025</p> \u2190 Back"},{"location":"SQL/physical-dependence/#physical-data-dependence","title":"Physical Data Dependence","text":"<p>Physical data independence The logical definition of the data remains unchanged, even when we make changes to the actual implementation</p> <p>Imagine a database like a filing cabinet: - You (the user) just ask, \u201cHey, give me Alice\u2019s file.\u201d - You don\u2019t care where in the cabinet the file is kept, how it\u2019s arranged, or how it\u2019s labeled inside \u2014 you just want the info.</p> <p></p>"},{"location":"SQL/physical-dependence/#sql-example","title":"\ud83d\udce6 SQL Example:","text":"<p>You have this table:</p> <p><code>Customers (ID, Name, Email)</code></p> <p>And you run:</p> <p><code>SELECT Name FROM Customers WHERE ID = 5;</code></p> <p>Now imagine the database admin: - Moves that table to a faster disk - Adds an index on <code>ID</code> to make the query faster - Stores some rows in a different file for performance</p> <p></p>"},{"location":"SQL/physical-dependence/#query-still-works-the-same","title":"\ud83d\udd10 Query still works the same:","text":"<ul> <li>You don\u2019t have to change it</li> <li>You still get the same result</li> <li>You don\u2019t even know anything changed inside</li> </ul>"},{"location":"SQL/rank_rownum_denserank/","title":"Rank rownum denserank","text":"<p>Last modified: May 18, 2025</p> \u2190 Back"},{"location":"SQL/rank_rownum_denserank/#row-number-rank-dense-rank","title":"Row Number, Rank, Dense Rank","text":"<p>In SQL, ranking functions help us assign ranks to rows based on partitioning and order expressions. A window is just a set of rows that meet certain conditions</p> <p>Generic syntax:</p> <pre><code>SELECT \n  RANK() / DENSE_RANK() / ROW_NUMBER() OVER ( -- Compulsory expression\n    PARTITION BY partitioning_expression -- Optional expression\n    ORDER BY order_expression) -- Compulsory expression\nFROM table_name;\n</code></pre> <p></p> <ol> <li>ROW_NUMBER(): This function assigns a unique sequential number to each row within a window. It's like numbering the rows in order.</li> <li>RANK(): The\u00a0<code>RANK()</code>\u00a0function handles tied values by assigning the same rank to them. However, it may skip subsequent ranks, leaving gaps in the sequence.</li> <li>DENSE_RANK(): Similar to\u00a0<code>RANK()</code>,\u00a0<code>DENSE_RANK()</code>\u00a0also handles tied values by assigning the same rank. However, it does not skip ranks, resulting in no gaps in the sequence.</li> </ol> <p></p>"},{"location":"SQL/rank_rownum_denserank/#window-function-ranking-with-order-by","title":"Window Function Ranking with ORDER BY","text":"<p>Write a query to display the list of artists sorted in descending order of their concert revenue.</p> <pre><code>SELECT \n artist_name, \n concert_revenue, \n ROW_NUMBER() OVER (ORDER BY concert_revenue) AS row_num,\n RANK() OVER (ORDER BY concert_revenue) AS rank_num,\n DENSE_RANK() OVER (ORDER BY concert_revenue) AS dense_rank_num\nFROM concerts;\n</code></pre> artist_name concert_revenue row_num rank_num dense_rank_num BTS 800000 1 1 1 Beyonce 750000 2 2 2 Ariana Grande 720000 3 3 3 Bruno Mars 700000 4 4 4 Taylor Swift 700000 5 4 4 Justin Bieber 680000 6 6 5 Pink Floyd 670000 7 7 6 Red Hot Chili Peppers 660000 8 8 7 U2 650000 9 9 8 Ed Sheeran 650000 10 9 8 <p></p>"},{"location":"SQL/rank_rownum_denserank/#window-function-ranking-with-partition-by-and-order-by","title":"Window Function Ranking with PARTITION BY and ORDER BY","text":"<pre><code>SELECT \n  artist_name, \n  country,\n  year_of_formation,\n  ROW_NUMBER() OVER (PARTITION BY country ORDER BY year_of_formation) AS row_num,\n RANK() OVER (PARTITION BY country ORDER BY year_of_formation) AS rank_num,\n DENSE_RANK() OVER (PARTITION BY country ORDER BY year_of_formation) AS dense_rank_num\nFROM concerts;\n</code></pre> artist_name country concert_revenue row_num rank_num dense_rank_num Rihanna Barbados 550000 1 1 1 Justin Bieber Canada 680000 1 1 1 The Weeknd Canada 620000 2 2 2 BTS South Korea 800000 1 1 1 Super Junior South Korea 490000 2 2 2 EXO South Korea 480000 3 3 3 Got7 South Korea 470000 4 4 4 SHINee South Korea 470000 5 4 4 Ed Sheeran United Kingdom 650000 1 1 1 Adele United Kingdom 600000 2 2 2 One Direction United Kingdom 580000 3 3 3 ... ... ... ... ... ... <p>Source: SQL Ranking Window Functions With Examples</p>"},{"location":"SQL/relationship/","title":"Relationship","text":"<p>Last modified: May 24, 2025</p> \u2190 Back"},{"location":"SQL/relationship/#relationship","title":"Relationship","text":"<p>If A and B are sets, then a relation R is a subset of A * B</p> <p></p> <p></p> <ul> <li>One-to-one</li> <li>One-to-many; Many-to-one</li> <li>Many-to-many</li> </ul> <p></p> <p></p> <p></p> <p></p>"},{"location":"SQL/relationship/#multiplicity-cardinality","title":"Multiplicity &amp; Cardinality","text":"<ul> <li>In UML, multiplicity specifies lower and upper bound constraints on the cardinality of a relationship</li> </ul> Multiplicity Cardinality Description 0..0 0 Collection must be empty 0..1 Either zero or one instance 1..1 1 Exactly one instance 0..* * Zero or more instances 1..* One or more instance 5..5 5 Exactly 5 instances m..n At least m, but no more than n instances"},{"location":"SQL/relationship/#multi-way-relationships","title":"Multi-way Relationships","text":"<p>A and B are two sets (collections of things).</p> <p>Example: A = {Person1, Person2} B = {Product1, Product2}</p> <p>A \u00d7 B (called the \"Cartesian product\") is all possible combinations of one item from A and one item from B.     A \u00d7 B = { (Person1, Product1), (Person1, Product2), (Person2, Product1), (Person2, Product2) }</p> <p>Relation R is some subset of A \u00d7 B \u2014 meaning R just picks certain pairs out of A \u00d7 B that actually make sense for the relationship you're modeling.</p> <p></p>"},{"location":"SQL/selfjoin/","title":"Selfjoin","text":"<p>Last modified: April 30, 2025</p> \u2190 Back"},{"location":"SQL/selfjoin/#self-join-practice","title":"SELF JOIN Practice","text":"<p>Which categories of products were purchased on both 3/1/2025 and 3/3/2025?</p> <pre><code>SELECT *\nFROM Productwithkeys p\nJOIN purchasewithkeys marchfirst\n  ON p.productID = marchfirst.productid\n  AND CONVERT(date, marchfirst.date) = '3/1/2025'\nJOIN purchasewithkeys marchthird\n  ON p.productID = marchthird.productid\n  AND CONVERT(date, marchthird.date) = '3/3/2025'\n</code></pre> <p></p> <p>same with WHERE syntax</p> <pre><code>SELECT *\nFROM Productwithkeys p,\n     purchasewithkeys marchfirst,\n     purchasewithkeys marchthird\nWHERE p.productID = marchfirst.productid\n  AND p.productID = marchthird.productid\n  AND CONVERT(date, marchfirst.date) = '3/1/2025'\n  AND CONVERT(date, marchthird.date) = '3/3/2025'\n</code></pre> <p></p> <p>same with CTE</p> <pre><code>WITH marchfirst AS (\n    SELECT *\n    FROM purchasewithkeys marchfirst\n    WHERE CONVERT(date, date) = '3/1/2025'\n), marchthird AS (\n    SELECT *\n    FROM purchasewithkeys marchthird\n    WHERE CONVERT(date, date) = '3/3/2025'\n)\nSELECT *\nFROM Productwithkeys p, marchfirst mf, marchthird mt\nWHERE p.productID = mf.productid\n  AND p.productID = mt.productid\n</code></pre>"},{"location":"SQL/views%26temptables/","title":"Views&temptables","text":"<p>Last modified: June 3, 2025</p> \u2190 Back"},{"location":"SQL/views%26temptables/#views-temp-tables","title":"Views &amp; Temp Tables","text":""},{"location":"SQL/views%26temptables/#views","title":"Views","text":"<pre><code>CREATE VIEW oldCats as \n    SELECT *\n    FROM Cats\n    WHERE age &gt; 4\n</code></pre> <ul> <li> <p>Views are virtual tables based on SELECT queries.</p> </li> <li> <p>Do not store data themselves \u2014 just a saved query.</p> </li> <li> <p>Auto-update if base table data changes.</p> </li> <li> <p>Can be queried like regular tables.</p> </li> </ul> <p></p>"},{"location":"SQL/views%26temptables/#temp-tables","title":"Temp tables","text":"<pre><code>CREATE TABLE #temp_customers (\n    id INT,\n    age INT\n)\n\nSELECT * FROM #temp_customers\n\nDROP TABLE IF EXISTS #temp_customers\n</code></pre> <ul> <li> <p>lives only during current session.</p> </li> <li> <p>Good for storing intermediate results in scripts</p> </li> </ul>"},{"location":"SQL/weakentitysets/","title":"Weakentitysets","text":"<p>Last modified: May 2, 2025</p> \u2190 Back"},{"location":"SQL/weakentitysets/#weak-entity-sets","title":"Weak Entity Sets","text":"<ul> <li>A weak entity can't be uniquely identified by its own attributes alone.</li> <li>It depends on a strong entity (another table/entity) for its primary key.</li> <li>From the example:     University(name) \u2192 Strong entity (can be identified just by <code>name</code>).     Team(sport, number, universityName) \u2192 Weak entity (needs <code>universityName</code> to uniquely identify a Team).</li> </ul> <p>Without the university's name, you might have multiple teams with the same sport and number \u2014 but which university they belong to would be unclear.</p> <p></p> <p>Why do we care about Weak Entities?</p> <ol> <li> <p>Avoid Duplicating Keys:</p> <ul> <li>Instead of copying the whole key into every weak entity, you reference it simply.</li> </ul> </li> <li> <p>Reflect Logical Structure:</p> <ul> <li>It models real-world dependency \u2014 e.g., a Team exists only because a University exists.</li> </ul> </li> <li> <p>Automatic Deletion:</p> <ul> <li>If the strong entity (like a University) is deleted, the dependent weak entities (like its Teams) should automatically be deleted too.</li> </ul> </li> </ol> <p></p>"},{"location":"SQL/weakentitysets/#weak-relationship","title":"Weak Relationship","text":"<p>A relationship is weak (identifying) only if it connects a weak entity to its owner (strong entity) and is used to define its primary key.</p>"},{"location":"SQL/windowfunctions/","title":"Windowfunctions","text":"<p>Last modified: May 18, 2025</p> \u2190 Back"},{"location":"SQL/windowfunctions/#window-functions","title":"Window Functions","text":"<p>Window functions create a new column based on calculations performed on a subset or \"window\" of the data. The window starts at the first row on a particular column and increases in size unless you constrain the size of the window.</p> <p></p> <p>syntax</p> <pre><code>SELECT '(Optional: The data you want to select)',\n[aggregate function]'(The column to perform the aggregate function on)'\nOVER(Optional: PARTITION BY and/or ORDER BY)\nAS '(Descriptive name)' FROM '(corresponding table)';\n</code></pre> <p></p> <pre><code>SELECT 'Day', 'Mile Driving',\nSUM('Miles Driving') OVER(ORDER BY 'Day') AS 'Running Total'\nFROM 'Running total mileage visual';\n</code></pre> <p>Constrain the window to be 3 rows tall:</p> <pre><code>SELECT 'Day', 'Daily Revenue',\nAVG('Daily Revenue') OVER(ORDER BY 'Day' ROWS 2 PRECEDING)\nAS '3 Day Average' FROM 'Running Average Example';\n</code></pre> Day Daily Revenue 3 Day Average 1 39 39 2 528 283.5 3 39 202 4 86 217.66 5 86 70.33 6 351 174.33 <p></p> <p>Window functions also works on partitioned data. It first sorts the data then applies the aggregate function on these groups.</p> <pre><code>SELECT 'Day', 'Weekend', 'Daily Revenue',\nSUM('Daily Revenue') OVER(PARTITION BY 'Weekend') AS 'Total'\nFROM 'Partitioned Total Example';\n</code></pre> <p></p>"},{"location":"SQL/windowfunctions/#organizing-with-window-functions","title":"Organizing with Window Functions","text":""},{"location":"SQL/windowfunctions/#rows","title":"Rows","text":"<pre><code>SELECT '(The data you want to select)',\n[aggregate function]'(The column to perform the aggregate function on)'\nOVER(ROWS [# of rows you want to aggregate - 1] PRECEDING/FOLLOWING)\nAS '(descriptive name)'\nFROM '(appropriate table)';\n</code></pre> <pre><code>SELECT *,\nAVG('Daily Revenue')\nOVER(ROWS 2 PRECEDING)\nAS '3 Day Average'\nFROM 'Running Average Example'\n</code></pre> <pre><code>SELECT *,\nAVG('Daily Revenue')\nOVER(ROWS 2 FOLLOWING)\nAS '3 Day Average'\nFROM 'Running Average Example'\n</code></pre>"},{"location":"SQL/windowfunctions/#partition-by","title":"PARTITION BY","text":"<pre><code>SELECT '(The data you want to select)',\n[aggregate function]'(The column to perform the aggregate function on)'\nOVER(PARTITION BY [category to group by]) AS '(descriptive name)'\nFROM '(appropriate table)';\n</code></pre> <pre><code>SELECT Track.Name, Track.Milliseconds\nAVG(Track.Milliseconds) OVER(PARTITION BY Track.GenreId)\nAS 'AverageSongLength'\nFROM 'Track' ORDER BY Track.Name ASC LIMIT 20;\n</code></pre>"},{"location":"SQL/windowfunctions/#summary","title":"Summary","text":"<ul> <li> <p>A window function does not cause rows to become grouped into a single output row, it creates a whole output column.</p> </li> <li> <p>A window function can be broken into groups and organized easily with keywords like: PARTITION BY and ORDER BY.</p> <ul> <li> <p>PARTITION BY- Divides the aggregate function results between different groupings of data.</p> </li> <li> <p>ORDER BY- Organize the data being worked on by the aggregate functions and create running calculations</p> </li> </ul> </li> </ul> <p></p> <p>Source: How Window Functions Work</p>"},{"location":"SQL/with/","title":"With","text":"<p>Last modified: April 28, 2025</p> \u2190 Back"},{"location":"SQL/with/#with","title":"WITH","text":"<p>Nested queries in the FROM clause:</p> <pre><code>SELECT X.pname  \nFROM (SELECT *  \n    FROM Product AS Y  \n    WHERE price &gt; 20) as X\nWHERE X.price &lt; 500\n</code></pre> <p></p> <p>Use WITH to assign a name to a result so it can be reused:</p> <pre><code>WITH expensiveprods as (\n    SELECT *\n    FROM Product AS Y\n    WHERE price &gt; 20\n)\nSELECT X.pname\nFROM expensiveprods as X\nWHERE X.price &lt; 500\n</code></pre> <p></p> <p>Multiple results can be named  </p> <pre><code>WITH\nseattlecompanies as (\n    SELECT *\n    FROM Company\n    WHERE city = \u2018Seattle\u2019\n),\nexpensiveprods as (\n    SELECT *\n    FROM Product AS Y\n    WHERE price &gt; 20\n)\nSELECT s.cname, e.pname\nFROM expensiveprods e, seattlecompanies s\nWHERE e.cid = s.cid\n</code></pre> <p></p> <p>Results can refer to previous results:</p> <pre><code>WITH  \nseattlecompanies as (  \n    SELECT *  \n    FROM Company  \n    WHERE city = \u2018Seattle\u2019  \n),  \nseattleprods as (  \n    SELECT p.*  \n    FROM Product p, seattlecompanies s  \n    WHERE p.cid = s.cid  \n),  \ncheapseattleprods as (  \n    SELECT *  \n    FROM seattleprods p  \n    WHERE price &lt; 100  \n),  \nSELECT * FROM cheapseattleprods\n</code></pre> <p></p> <p>Example: Find companies that sell both cheap and expensive products  </p> <pre><code>WITH  \n    cheap as (  \n    SELECT cid  \n    FROM Product p, Company c  \n    WHERE p.cid = c.cid  \n    AND p.price &lt; 10  \n)  \nexpensive as (  \n    SELECT cid  \n    FROM Product p, Company c  \n    WHERE p.cid = c.cid  \n    AND p.price &gt; 100  \n)  \nSELECT cname FROM Company c, cheap, expensive  \nWHERE c.cid = cheap.cid  \nAND c.cid = expensive.cid\n</code></pre>"},{"location":"SQL/witnesses/","title":"Witnesses","text":"<p>Last modified: April 22, 2025</p> \u2190 Back"},{"location":"SQL/witnesses/#witnesses","title":"Witnesses","text":"<p>refers to a record (or tuple) that provides evidence or support for an aggregate query result</p> <pre><code>SELECT x.city, MAX(y.price)\nFROM Company x, Product y\nWHERE x.cid = y.cid\nGROUP BY x.city;\n</code></pre> <p>Getting the result per city, but don't know which product actually has that maximum price.</p> <pre><code>WITH CityMax AS (\n  SELECT x.city, MAX(y.price) AS maxprice\n  FROM Company x, Product y\n  WHERE x.cid = y.cid\n  GROUP BY x.city\n)\nSELECT DISTINCT u.city, v.pname, v.price\nFROM Company u, Product v, CityMax w\nWHERE u.cid = v.cid AND u.city = w.city AND v.price = w.maxprice;\n</code></pre> <p></p> cid cname city 1 Apple Seattle 2 Microsoft Seattle 3 Samsung Seoul pname price cid iPhone 999 1 MacBook 1999 1 Surface 1499 2 Galaxy 1199 3 GalaxyTab 1999 3 city pname price Seattle MacBook 1999 Seoul GalaxyTab 1999"},{"location":"coding/Index/","title":"Index","text":"\u2190 Back"},{"location":"coding/Index/#_1","title":"Index","text":""},{"location":"coding/Index/#category-coding-practice","title":"Category: Coding Practice","text":"Data Structures Cheat Sheet DP Patterns"},{"location":"coding/dp/","title":"Dp","text":"<p>Last modified: July 25, 2025</p> \u2190 Back"},{"location":"coding/dp/#top-5-dynamic-programming-patterns-for-coding-interviews","title":"Top 5 Dynamic Programming Patterns for Coding Interviews","text":"<p>DP: method for solving problems by breaking them down into smaller overlapping sub problems, solving each subproblem once, and storing the results to avoid redundant computation</p> <p></p>"},{"location":"coding/dp/#1-fibonacci-numbers","title":"1. Fibonacci Numbers","text":"<ul> <li>1-dimensional size of n problem</li> <li>only care about the last 2 computed values</li> </ul> <p>recursion:</p> <pre><code>def fib(n):\n    if n &lt;= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n</code></pre> <p>Time: \\(O(2^N)\\)</p> <p>bottom-up:</p> <pre><code>def fib(n):\n    if n &lt;= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n</code></pre> <p>Time: \\(O(N)\\)</p> <p></p>"},{"location":"coding/dp/#2-zero-one-knapsack","title":"2. Zero / One Knapsack","text":"<p>each item can either be taken once (1) or not at all (0)</p> <p>i.e. #494</p> <pre><code>def findTargetSumWays(self, nums: List[int], target: int) -&gt; int:\n    dp = {}\n\n    def backtrack(i, total):\n        if i == len(nums):\n            return 1 if total == target else 0\n        if (i, total) in dp:\n            return dp[(i, total)]\n\n        dp[(i, total)] = backtrack(i+1, total+nums[i]) +\n                        backtrack(i+1, total-nums[i])\n\n        return dp[(i, total)]\n\n    return backtrack(0, 0)\n</code></pre> <p></p>"},{"location":"coding/dp/#3-unbounded-knapsack","title":"3. Unbounded Knapsack","text":"<p>still want to sum up to target value, but use each item as many times as you want</p> <p>i.e. #322</p> <pre><code>def coinChange(self, coins: List[int], amount: int) -&gt; int:\n    dp = [amount+1] * (amount + 1)\n    dp[0] = 0\n\n    for a in range (1, amount+1):\n        for coin in coins:\n            if a - coin &gt;= 0:\n                dp[a] = min(dp[a], 1+dp[a-coin])\n\n    return dp[amount] if dp[amount] != amount+1 else -1\n</code></pre> <p></p>"},{"location":"coding/dp/#4-longest-common-subsequence","title":"4. Longest Common Subsequence","text":"<p>i.e. #1143</p> <pre><code>def longestCommonSubsequence(self, text1: str, text2: str) -&gt; int:\n    dp = [[0 for j in range(len(text2)+1)] for i in range(len(text1)+1)]\n\n    for i in range(len(text1)-1, -1, -1):\n        for j in range(len(text2)-1, -1, -1):\n            if text1[i] == text2[j]:\n                dp[i][j] = 1 + dp[i+1][j+1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j+1])\n\n    return dp[0][0]\n</code></pre> <p></p>"},{"location":"coding/dp/#5-palindromes","title":"5. Palindromes","text":"<p>i.e. #5</p> <pre><code>def longestPalindrome(self, s: str) -&gt; str:\n\n    res = ''\n    resLen = 0\n\n    for i in range(len(s)):\n        l, r = i, i\n        while l &gt;= 0 and r &lt; len(s) and s[l] == s[r]:\n            if (r - l + 1) &gt; resLen:\n                resLen = r - l + 1\n                res = s[l:r+1]\n            l -= 1\n            r += 1\n\n        l, r = i, i+1\n        while l &gt;= 0 and r &lt; len(s) and s[l] == s[r]:\n            if (r - l + 1) &gt; resLen:\n                resLen = r - l + 1\n                res = s[l:r+1]\n            l -= 1\n            r += 1\n\n    return res\n</code></pre> <p> </p> <p>Source: Top 5 Dynamic Programming Patterns for Coding Interviews (NeetCode)</p>"},{"location":"coding/dsapatterns/","title":"Dsapatterns","text":"<p>Last modified: July 25, 2025</p> \u2190 Back"},{"location":"coding/dsapatterns/#_1","title":".","text":""},{"location":"coding/dss/","title":"Dss","text":"<p>Last modified: July 4, 2025</p> \u2190 Back"},{"location":"coding/dss/#data-structures-cheat-sheet","title":"Data Structures Cheat Sheet","text":""},{"location":"coding/dss/#lists","title":"lists","text":"<pre><code>arr = [1, 2, 3]\narr.append(4)        # [1, 2, 3, 4]\narr.pop()            # Removes last element -&gt; 4\narr.insert(1, 9)     # [1, 9, 2, 3]\narr.remove(2)        # Removes first occurrence of 2\narr.sort()           # In-place sort\nsorted_arr = sorted(arr)  # Returns new sorted list\narr.reverse()        # In-place reverse\n</code></pre>"},{"location":"coding/dss/#tuples-immutable-lists","title":"Tuples (Immutable Lists)","text":"<pre><code>t = (1, 2, 3)\nx, y, z = t  # Tuple unpacking\n</code></pre>"},{"location":"coding/dss/#sets-unordered-unique-elements","title":"Sets (Unordered, Unique Elements)","text":"<pre><code>// empty: s = set()\ns = {1, 2, 3}\ns.add(4)\ns.remove(2)\ns.discard(5)  # Safer than remove \u2013 no error\ns1 = {1, 2, 3}\ns2 = {2, 3, 4}\ns1 &amp; s2  # Intersection: {2, 3}\ns1 | s2  # Union: {1, 2, 3, 4}\ns1 - s2  # Difference: {1}\n</code></pre>"},{"location":"coding/dss/#dictionaries","title":"Dictionaries","text":"<pre><code>d = {'a': 1, 'b': 2}\nd['c'] = 3           # Add key\nvalue = d['a']       # Access value\nvalue = d.get('x', 0)  # Safer access\ndel d['b']           # Remove key\nfor key, val in d.items():\n    print(key, val)\n</code></pre>"},{"location":"coding/dss/#stack-queues","title":"Stack &amp; Queues","text":"<pre><code>stack = []\nstack.append(1)\nstack.append(2)\nstack.pop()       # LIFO\n</code></pre> <pre><code>from collections import deque\nqueue = deque()\nqueue.append(1)\nqueue.popleft()   # FIFO\n</code></pre> Variable Created As Used For Typical Methods <code>list</code> <code>[]</code> general storage <code>append()</code>, <code>insert()</code>, <code>pop(i)</code>, <code>sort()</code> <code>stack</code> <code>[]</code> LIFO <code>append()</code>, <code>pop()</code> <code>queue</code> <code>deque()</code> FIFO <code>append()</code>, <code>popleft()</code> <pre><code>// join items in stack into one string\nstack = []\njoined = ''.join(stack)\n</code></pre>"},{"location":"coding/dss/#counter","title":"Counter","text":"<p><code>from collections import Counter</code></p> <pre><code>nums = [1, 1, 2, 3, 2, 1]\n\nc = Counter(nums)\nprint(c)\n\n// Counter({1: 3, 2: 2, 3: 1})\n\nword = \"banana\"\nc = Counter(word)\nprint(c)\n\n// Counter({'a': 3, 'n': 2, 'b': 1})\n</code></pre> <pre><code>for key, value in Counter([1, 1, 2, 2, 2, 3]).items():\n    print(f\"{key} appears {value} times\")\n</code></pre> <pre><code>count[3]  # \u279d 3\ncount[99]  # \u279d 0\ncount.get(99, 0)  # \u279d 0\n</code></pre> <pre><code>max_freq = max(count.values())  # \u279d 3\nmin_freq = min(count.values())  # \u279d 1\n\n# One Most Frequent Element\nmost_common = count.most_common(1)[0]  # \u279d (3, 3)\nelem = most_common[0]  # \u279d 3\nfreq = most_common[1]  # \u279d 3\n</code></pre>"}]}